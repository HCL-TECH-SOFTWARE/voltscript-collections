%REM
	Library VoltScriptCollections 
	Collection and Map classes and methods
 
%END REM

'{{VSID_COPYRIGHT_NOTICE_
%REM
    Copyright HCL America, Inc. 1999, 2023

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
%END REM
'}}

Option Declare
Option Public
UseVSE "*JsonVSE"
Use "../libs/VoltScriptLogging"



'{{SETI_AUTHOR_CODE_VoltScriptCollections_Private_Constants
Private Const ERR_COLLECTION_ADD_FAILED =   1020
Private Const MSG_COLLECTION_ADD_FAILED =   |One or more errors occured while adding elements to the collection.  |

'}}

'{{SETI_AUTHOR_CODE_VoltScriptCollections_Private_Variables
'}}

'{{SETI_AUTHOR_CODE_VoltScriptCollections_Private_Types
'}}

'{{SETI_AUTHOR_CODE_VoltScriptCollections_Private_Properties
'}}



%REM
	Class Collection 
	Base class for Collections
 
%END REM
Public Class Collection 

	'{{SETI_AUTHOR_CODE_Collection_Private_Variables
    Private m_comparator as Comparator
    Private m_contentType as String
    Private m_elementCount as Long
    Private m_hasContent as Boolean
    Private m_isLocked as Boolean
    Private m_isSorted as Boolean
    Private m_isUnique as Boolean
    Private m_suppressErrors as Boolean
    Private p_content List as Variant
    Private p_isCollReversed as Boolean
    Private p_isObjects as Boolean
    Private p_allowedContents as Variant
	'}}


	%REM
		Property comparator 
		Comparator to compare values with
	
		@return	Comparator
	%END REM
	Public Property Get comparator As Comparator 
		'{{SETI_AUTHOR_CODE_Get.comparator_implementation
        Set Comparator = Me.m_comparator
		'}}

	End Property


	%REM
		Property elementCount 
		Number of elements within the Collection
	
		@return	Long
	%END REM
	Public Property Get elementCount As Long 
		'{{SETI_AUTHOR_CODE_Get.elementCount_implementation
        Return Me.m_elementCount
		'}}

	End Property


	%REM
		Property contentType 
		TypeName(s) of elements within the Collection
	
		@return	String
	%END REM
	Public Property Get contentType As String 
		'{{SETI_AUTHOR_CODE_Get.contentType_implementation
        Return Me.m_contentType
		'}}

	End Property


	%REM
		Property isUnique 
		Flag indicating if the elements in the Collection must be unique
	
		@return	Boolean
	%END REM
	Public Property Get isUnique As Boolean 
		'{{SETI_AUTHOR_CODE_Get.isUnique_implementation
        Return Me.m_isUnique
		'}}

	End Property


	%REM
		Property isSorted 
		Flag indicating if the Collection is sorted (using Comparator object internally)
	
		@return	Boolean
	%END REM
	Public Property Get isSorted As Boolean 
		'{{SETI_AUTHOR_CODE_Get.isSorted_implementation
        Return Me.m_isSorted
		'}}

	End Property


	%REM
		Property isLocked 
		Flag indicating if the Collection is locked, so adds, removes and replaces are aborted
	
		@return	Boolean
	%END REM
	Public Property Get isLocked As Boolean 
		'{{SETI_AUTHOR_CODE_Get.isLocked_implementation
        Return Me.m_isLocked
		'}}

	End Property


	%REM
		Property hasContent 
		Flag indicating if the Collection has elemens
	
		@return	Boolean
	%END REM
	Public Property Get hasContent As Boolean 
		'{{SETI_AUTHOR_CODE_Get.hasContent_implementation
        Me.m_hasContent = Me.ElementCount > 0

        Return Me.m_hasContent
		'}}

	End Property


	%REM
		Property isReversed 
		Flagindicating whether the Collection has been reversed
	
		@return	Boolean
	%END REM
	Public Property Get isReversed As Boolean 
		'{{SETI_AUTHOR_CODE_Get.isReversed_implementation
        Return Me.p_isCollReversed
		'}}

	End Property


	%REM
		Property suppressErrors 
		Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked
or attempting to insert an entry into a sorted Collection.
Instead of throwing an error, e.g. for wrong content type, the method will just return false
	
		@return	Boolean
	%END REM
	Public Property Get suppressErrors As Boolean 
		'{{SETI_AUTHOR_CODE_Get.suppressErrors_implementation
        Return Me.m_suppressErrors
		'}}

	End Property


	%REM
		Property suppressErrors 
		Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked
or attempting to insert an entry into a sorted Collection.
Instead of throwing an error, e.g. for wrong content type, the method will just return false
	
	%END REM
	Public Property Set suppressErrors As Boolean 
		'{{SETI_AUTHOR_CODE_Set.suppressErrors_implementation
        Me.m_suppressErrors = suppressErrors
		'}}

	End Property

	'{{SETI_AUTHOR_CODE_Collection_Private_Properties
	'}}


	%REM
		Sub clear 
		Removes all values from the Collection and resets whether the collection is reversed.
	
		@throws	Collection is locked 	
	%END REM
	Public Sub clear() 
		'{{SETI_AUTHOR_CODE_clear_implementation
        Call checkLocked()

        Erase Me.p_Content
        Me.m_elementCount = 0
        Me.p_isCollReversed = false
		'}}

	End Sub


	%REM
		Sub unlock 
		Unlocks the Collection, so add, remove, replace or reverse functions can be used again
	
	%END REM
	Public Sub unlock() 
		'{{SETI_AUTHOR_CODE_unlock_implementation
        Me.m_isLocked = False
		'}}

	End Sub


	%REM
		Sub lock 
		Locks the collection, so any add, remove, replace or reverse functions trigger errors. 
		Useful when passing a collection to other functions.
	
	%END REM
	Public Sub lock() 
		'{{SETI_AUTHOR_CODE_lock_implementation
        Me.m_isLocked = True
		'}}

	End Sub


	%REM
		Sub reverse 
		Reverses a collection
	
	%END REM
	Public Sub reverse() 
		'{{SETI_AUTHOR_CODE_reverse_implementation
        Dim newList List as Variant
        Dim execString as String
        Dim comparatorType as String
        Dim setDescending as Boolean
        Dim i as Long
        Dim count as Long

        Call checkLocked()

        If (Not me.hasContent) Then Exit Sub

        ' Create a new list, put them in reverse order
        For i = Me.ElementCount - 1 To 0 Step -1
            If (IsObject(Me.p_Content(count))) Then
                Set newList(i) = Me.p_Content(count++)
            Else
                newList(i) = Me.p_Content(count++)
            End If
        Next

        ' Erase p_Content and copy values from newList into p_Content
        Erase Me.p_Content
        ForAll elem in newList
            Call insertIntoContent(elem, ListTag(elem))
        End ForAll
        Erase newList
        Me.p_isCollReversed = Not Me.p_isCollReversed
		'}}

	End Sub


	%REM
		Sub fromJson 
		Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.
	
		@param	jsonObj 	JsonObject containig an array of scalars

		@throws	A collection can only accept an array 	
	%END REM
	Public Sub fromJson(jsonObj As JsonObject) 
		'{{SETI_AUTHOR_CODE_fromJson_implementation
        Call checkLocked()

        Dim array as Variant
        If (jsonObj.childCount = 0) Then Exit Sub
        If (Not jsonObj.isArray()) Then
            Error 1400, "A collection can only accept an array"
        Else
            array = jsonObj.valueArray
            Call addArray(array)
        End If
		'}}

	End Sub


	%REM
		Sub transform 
		Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed
	
		@param	transformer 	CollectionTransformer to transform members

		@param	newColl 	Collection to load transformed members into

	%END REM
	Public Sub transform(transformer As CollectionTransformer, newColl As Collection) 
		'{{SETI_AUTHOR_CODE_transform_implementation
        Dim i as Long
        Dim innerTransformer as CollectionTransformer
        Dim resetneeded as Boolean 

        If (Not me.hasContent) Then Exit Sub

        ' Not just best practice, this is required. We cannot re-set transformer in a function
        If (transformer is Nothing) Then
            Set innerTransformer = new CollectionTransformer()
        Else
            Set innerTransformer = transformer
        End if

        ' grab the initial suppressErrors value of newColl 
        If (me.suppressErrors) Then 
            If Not newColl.suppressErrors Then resetNeeded = True 
            newColl.suppressErrors = True
        End if 

        Do
            Call newColl.add(innerTransformer.transform(Me.p_Content(i)))
        Loop While ++i < Me.ElementCount

        ' conditionally reset the suppressErrors of newColl 
        If (me.suppressErrors && resetNeeded) Then newColl.suppressErrors = False  
		'}}

	End Sub


	%REM
		Sub New 
		Constructor
	
		@param	contentType 	Defines the Content Type of the Collection

		@param	comparator 	Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value

		@param	mustBeUnique 	Flag indicating if elements within the Collection must be unique

		@param	isSorted 	Flag indicating if the content within the Collection shall be sorted

	%END REM
	Public Sub New(contentType As String, comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean) 
		'{{SETI_AUTHOR_CODE_New_implementation
        Me.m_contentType = FullTrim(UCase(contentType))
        Call validateContentType()

        Me.m_isUnique = mustBeUnique
        Me.m_isSorted = isSorted
        If (comparator is Nothing) Then
            Set Me.m_comparator = New Comparator(False)
        Else
            Set Me.m_comparator = comparator
        End If
		'}}

	End Sub


	%REM
		Function clone 
		Creates a copy of the Collection
	
		@return	Collection
	%END REM
	Public Function clone() As Collection 
		'{{SETI_AUTHOR_CODE_clone_implementation
        Dim newColl as New Collection(Me.ContentType, Me.Comparator, Me.isUnique, Me.isSorted)
        Dim i as Long

        If (Not me.hasContent) Then Return newColl

        newColl.suppressErrors = Me.suppressErrors
        If (Me.isReversed) Then newColl.reverse
        ' But don't set isLocked

        Do
            Call newColl.add(Me.p_Content(i))
        Loop While ++i < Me.ElementCount

        Return newColl
		'}}

	End Function


	%REM
		Function toJson 
		Converts the Collection to a JsonObject that's an array.
If the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.
	
		@return	JsonObject
	%END REM
	Public Function toJson() As JsonObject 
		'{{SETI_AUTHOR_CODE_toJson_implementation
        Dim i as Long
        Dim result as New JsonObject(True)
        Dim temp as JsonObject
        If (Not Me.hasContent) Then Return result
        Do
            If (IsObject(Me.p_Content(i))) Then
                Try
                    Set temp = Me.p_Content(i).toJson()
                    Call result.appendToJsonArray(temp)
                Catch
                    If Not Me.suppressErrors Then Call getErrorSession().createErrorEntry(LOG_INFO) 
                End Try
            Else
                Call result.appendToJsonArray(Me.p_Content(i))
            End If
        Loop While ++i < Me.ElementCount
        Return result
		'}}

	End Function


	%REM
		Function getIndex 
		Checks whether the Collection contains a specific value.
	
		@param	checkValue 	Value to check for

		@return	Variant
	%END REM
	Public Function getIndex(checkValue As Variant) As Variant 
		'{{SETI_AUTHOR_CODE_getIndex_implementation
        If (Not continueAdd(checkValue)) Then Return NULL  'Not a valid insertion value, cannot be in Collection

        Dim nextPos as long
        Dim matchPos as Long
        If (Me.isSorted) Then
            'If it's sorted, use findPosInList rather than iterating everything, then check elements either side
            nextPos = findNextPosInList(checkValue)
            Return getDupePos(checkValue, nextPos)
        Else
            ' If it's an unsorted Collection, we need to iterate
            ForAll elem in p_content
                If (Me.Comparator.equals(checkValue, elem)) Then Return ListTag(elem)
            End ForAll
        End If
        Return NULL
		'}}

	End Function


	%REM
		Function getNthElementRaw 
		Gets the nth elment as a raew variant, starting at index 0
	
		@param	index 	Index of the element to return

		@return	Variant
	%END REM
	Public Function getNthElementRaw(index As Long) As Variant 
		'{{SETI_AUTHOR_CODE_getNthElementRaw_implementation
        'If you pass a non-existent indexed element of a List to a function it does not throw an error.
        If (index >= Me.elementCount) Then
            If (p_isObjects) Then Return Nothing Else Return
        End If

        Return p_content(index)
		'}}

	End Function


	%REM
		Function getAndRemoveLastRaw 
		Returns the LAST element in the collection and removes it from the collection.
If the collection is empty it just exits the function
	
		@return	Variant
		@throws	Collection is locked 	
	%END REM
	Public Function getAndRemoveLastRaw() As Variant 
		'{{SETI_AUTHOR_CODE_getAndRemoveLastRaw_implementation
        Dim tempVal as Variant
        Call checkLocked()

        If (Not Me.hasContent) Then
            If (p_isObjects) Then Return Nothing Else Return
        End If

        If (IsObject(p_Content(ElementCount - 1))) Then
            Set tempVal = p_Content(Me.ElementCount - 1)
        Else
            tempVal = p_Content(Me.ElementCount - 1)
        End If

        Erase p_content(Me.ElementCount - 1)
        Me.m_elementCount--
        Return tempVal
		'}}

	End Function


	%REM
		Function getAndRemoveFirstRaw 
		Returns the FIRST element in the collection and removes it from the collection.
If the collection is empty it just exits the function
	
		@return	Variant
		@throws	Collection is locked 	
	%END REM
	Public Function getAndRemoveFirstRaw() As Variant 
		'{{SETI_AUTHOR_CODE_getAndRemoveFirstRaw_implementation
        Dim tempVal as Variant
        Call checkLocked()

        If (Not Me.hasContent) Then
            If (p_isObjects) Then Return Nothing Else Return
        End If

        If (IsObject(p_content("0"))) Then
            Set tempVal = p_content("0")
        Else
            tempVal = p_content("0")
        End If

        If (Me.ElementCount > 1) Then
            Dim i as Long

            Erase Me.p_Content("0")
            For i = 1 To (Me.ElementCount - 1)
                Call insertIntoContent(Me.p_Content(i), (i - 1))
            Next
        Else
            Erase Me.p_Content("0")
        End If
        Me.m_elementCount--
        Return tempVal
		'}}

	End Function


	%REM
		Function join 
		Joins a collection of scalar values into a single string response separated by a passed delimiter
	
		@param	delim 	Delimiter to separate values

		@return	String
	%END REM
	Public Function join(delim As String) As String 
		'{{SETI_AUTHOR_CODE_join_implementation
        Dim content as String
        Dim i as Integer

        If (Not Me.hasContent) Then Return ""

        For i = 0 to Me.ElementCount - 1
            Try
                content = content & Me.p_Content(i) & delim
            Catch
                content = content & "NOT STRINGABLE" & delim
                If Not Me.suppressErrors Then Call getErrorSession.createCustomErrorEntry(Error$() & | (content(| & i & |) NOT STRINGABLE|, 0, 0, LOG_INFO)
            End Try
        Next

        Return Left(content, Len(content) - 1)
		'}}

	End Function


	%REM
		Function contains 
		Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.
	
		@param	checkValue 	Value to check for

		@return	Boolean
	%END REM
	Public Function contains(checkValue As Variant) As Boolean 
		'{{SETI_AUTHOR_CODE_contains_implementation
        If (Not continueAdd(checkValue)) Then Return False  'Not a valid insertion value, cannot be in Collection

        Dim possiblePos as Variant
        possiblePos = getIndex(checkValue)
        Return Not isNull(possiblePos)
		'}}

	End Function


	%REM
		Function remove 
		Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.
	
		@param	source 	Element to remove

		@param	allMatches 	Whether to remove all elements that match source or just the first match

		@return	Long
		@throws	Collection is locked 	
	%END REM
	Public Function remove(source As Variant, allMatches As Boolean) As Long 
		'{{SETI_AUTHOR_CODE_remove_implementation
        Dim i as Long
        Dim tempSize as Long
        Dim returnVal as Long
        Dim elem as Variant
        Dim removeCounter as Long
        Dim matchRemoved as Boolean
        tempSize = 0

        Call checkLocked()

        If (Not Me.hasContent) Then Exit Function

        ' We need to iterate the whole collection, because values subsequent to those removed will need shunting back down
        For i = 0 to (Me.ElementCount - 1)
            If (shouldAdd(matchRemoved, source, Me.p_Content(i))) Then
                ' This is not a value to remove
                If (i > tempSize) Then
                    ' i.e. we have removed something, so we need to shunt the values back down
                    Call insertIntoContent(Me.p_Content(i), tempSize)
                    Erase Me.p_Content(i)
                End If
                tempSize++ ' Running count of new Me.m_elementCount
            Else
                ' Remove value, increment count of removed, and set matchRemoved to True if we are not removing all matches
                Erase Me.p_Content(i)
                removeCounter++
                If Not allMatches Then matchRemoved = True
            End If
        Next
        Me.m_elementCount = tempSize
        Return removeCounter
		'}}

	End Function


	%REM
		Function filter 
		Filters a collection using a CollectionFilter and returns a new "filtered" collection
	
		@param	filterObj 	Collection filter to check each value with

		@return	Collection
	%END REM
	Public Function filter(filterObj As CollectionFilter) As Collection 
		'{{SETI_AUTHOR_CODE_filter_implementation
        Dim newColl as New Collection(Me.ContentType, Me.Comparator, Me.isUnique, Me.isSorted)
        Dim innerFilter as CollectionFilter
        Dim i as Long

        If (Not Me.hasContent) Then Return newColl

        ' Not just best practice, this is required. We cannot re-set filterObj in a function
        If (filterObj is Nothing) Then
            Set innerFilter = new CollectionFilter
        Else
            Set innerFilter = filterObj
        End If

        If (me.suppressErrors) Then newColl.suppressErrors = true

        Do
            If (innerFilter.filter(Me.p_Content(i))) Then
                Call newColl.add(Me.p_Content(i))
            End If
        Loop While ++i < Me.ElementCount

        If (me.suppressErrors) Then newColl.suppressErrors = False

        Return newColl
		'}}

	End Function


	%REM
		Function addAll 
		Adds all elements from an array or source Collection to the current Collection.
	
		@param	source 	Variant array or Collection of elements matching the Collection's ContentType

		@return	Collection
		@throws	This collection can only accept *ContentType*, passed value is *passedType* if source is different to ContentType

		@throws	Collection is locked 	
	%END REM
	Public Function addAll(source As Variant) As Collection 
		'{{SETI_AUTHOR_CODE_addAll_implementation

        Dim origList as Variant
        Dim origElemCount as Long

        Call checkLocked()

        origList = Me.p_Content
        origElemCount = Me.elementCount

        Try
            If (IsObject(source)) Then
                Call addCollection(source)
            Else
               Call addArray(source)
            End If
        Catch
            ' Reset collection
            Erase p_Content
            ForAll elem in origList
                If (IsObject(elem)) Then
                    Set p_Content(ListTag(elem)) = elem
                Else
                    p_Content(ListTag(elem)) = elem
                End If
            End ForAll
            Me.m_elementCount = origElemCount

            Error Err(), Error$() 
        End Try

        Return Me
		'}}

	End Function


	%REM
		Function replace 
		Replaces an element with another and returns the number of replacements made.
If the Collection is unsorted, replacements are made at the same positions.
If the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.
	
		@param	oldValue 	Value to replace

		@param	newValue 	Value to insert

		@param	allMatches 	Whether to replace the first match or all matches

		@return	Long
		@throws	Collection is locked 	
	%END REM
	Public Function replace(oldValue As Variant, newValue As Variant, allMatches As Boolean) As Long 
		'{{SETI_AUTHOR_CODE_replace_implementation
        Dim i as Long
        Dim j as Long
        Dim replaceCounter as Long
        Dim tmpColl as New Collection(Me.contentType, Me.comparator, Me.isUnique, Me.isSorted)

        Call checkLocked()

        If (Not Me.hasContent) Then Exit Function

        If (Not continueAdd(newValue)) Then Return 0

        If (Me.isSorted) Then
            ' Replace for sorted collections = remove then add for each removed
            i = Me.remove(oldValue, allMatches)
            For j = 0 to i - 1
                If add(newValue) Then replaceCounter++
            Next
        Else
            ' Otherwise iterate all, if it's a match, replace that element
            Do
                If (Me.Comparator.equals(oldValue, Me.p_Content(i))) Then
                    Call insertIntoContent(newValue, i)
                    replaceCounter++
                    If (Not allMatches) Then Return replaceCounter
                End If
            Loop While ++i < Me.ElementCount
        End If
        Return replaceCounter
		'}}

	End Function


	%REM
		Function add 
		Adds an element to the container
	
		@param	source 	Must match Collection's ContentType

		@return	Long
		@throws	This collection can only accept *ContentType*, passed value is *passedType* if source is different to ContentType

		@throws	Collection is locked 	
	%END REM
	Public Function add(source As Variant) As Long 
		'{{SETI_AUTHOR_CODE_add_implementation
        Call checkLocked()
 
        Dim checkIndex as Variant

        Try
            If Not continueAdd(source) Then Return -1

            If (Me.isSorted) Then
                Return insertSorted(source)
            Else
                If (Me.isUnique) Then
                    checkIndex = Me.getIndex(source)
                    If (Not IsNull(checkIndex)) Then Return checkIndex
                End If
                Call insertIntoContent(source, Me.m_elementCount++)
                Return Me.m_elementCount - 1
            End If
        Catch
            If Me.suppressErrors Then Return -1 

            Call getErrorSession.createErrorEntry(LOG_INFO)
            Error Err(), Error$() 
        End Try
		'}}

	End Function


	%REM
		Function insertAt 
		Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections
	
		@param	source 	Must match Collection's ContentType

		@param	index 	Index at which to insert the element

		@return	Boolean
		@throws	insertAt not allowed for sorted collections 	
		@throws	Collection is locked 	
		@throws	Collection is smaller than required position to insert at 	
	%END REM
	Public Function insertAt(source As Variant, index As Long) As Boolean 
		'{{SETI_AUTHOR_CODE_insertAt_implementation
        Call checkLocked()

        Dim i as Long
        Dim temp as Variant

        If (Me.isSorted) Then 
            Error 1403, "insertAt is not allowed for sorted collections"
        End If 

        Try
            If Not continueAdd(source) Then Exit Function

            If (index > Me.ElementCount) Then
                Error 1501, "Collection is smaller than required position to insert at: collection size " & Me.ElementCount - 1 & ", requested index " & index
            End If

            ' Do not do a ForAll loop on a collection you're modifying!
            If (index < Me.ElementCount) Then
                For i = Me.ElementCount To index Step -1
                    Call insertIntoContent(p_Content(i - 1), i)
                Next
            End If

            Call insertIntoContent(source, index)

            Me.m_elementCount ++
            Return True
        Catch
            If Not Me.suppressErrors Then 
                Call getErrorSession.createErrorEntry(LOG_INFO)
                Error Err(), Error$() 
            End If 
        End Try
		'}}

	End Function

    %REM
        Destructor
    %END REM
    Sub Delete
        Erase Me.p_Content
    End Sub



	'{{SETI_AUTHOR_CODE_Collection_Private_Methods

    %REM
        Adds a collection to this Collection.
        @param source           Element to insert
    %END REM
    Private Sub addCollection(source as Variant)
        Dim idex as Long
        Dim passedColl as Collection
        Dim errorcount as Integer 

        Set passedColl = source
        If passedColl.hasContent Then
            errorcount = getErrorSession().errorcount

            Do
                Try 
                    Call Me.add(passedColl.getNthElementRaw(idex))
                Catch 
                    ' Error has already been added to the ErrorSession by add() method.
                    Call globalLogSession.createLogEntry(LOG_INFO, |Collection Index: | & idex, ||)
                End Try 

            Loop While ++idex < passedColl.elementCount

            If (getErrorSession().errorcount > errorcount) Then Error ERR_COLLECTION_ADD_FAILED, MSG_COLLECTION_ADD_FAILED
        End If 

    End Sub

    %REM
        Adds an array to this Collection.
        @param source           Element to insert
    %END REM
    Private Sub addArray(source as Variant)
        Dim actualType as String
        Dim idex as Integer
        Dim errorcount as Integer 

        If (IsEmpty(source) || (Not IsArray(source))) Then Error 1400, "Source must be an array, source type: " & TypeName(source)

        errorcount = getErrorSession().errorcount         
        For idex = 0 To UBound(source)
            Try 
                Call Me.add(source(idex))
            Catch 
                ' Error has already been added to the ErrorSession by add() method.
                Call globalLogSession.createLogEntry(LOG_INFO, |Collection Index: | & idex, ||)
           End Try 
        Next

        If (getErrorSession().errorcount > errorcount) Then Error ERR_COLLECTION_ADD_FAILED, MSG_COLLECTION_ADD_FAILED

    End Sub

    %REM
        Throws an error if the collection is locked
    %END REM
    Private Sub checkLocked()
        If Me.isLocked Then Error 1403, "Collection is locked"
    End Sub

    %REM
        Checks whether the incoming value is not an empty Variant, checks content type and checks for dupes
    %END REM
    Private Function continueAdd(source as Variant) as Boolean
        Dim actualType as String
        actualType = TypeName(source)
        If (Me.m_contentType = "SCALAR") Then
            If (Not isScalar(source)) Then Error 1400, |This collection can only accept SCALARS, passed value is | & actualType
            If (isEmpty(source)) Then Error 1400, |This collection can only accept SCALARS, passed value is | & actualType
        ElseIf (Me.m_contentType = "OBJECT") Then
            If (Not isObject(source)) Then Error 1400, |This collection can only accept OBJECTS, passed value is | & actualType
            If (source is Nothing) Then Error 1400, |This collection can only accept SCALARS, passed value is NOTHING|
        Else
            ForAll ct in Me.p_allowedContents
                If (actualType = ct) Then
                    Return True
                End If
            End ForAll
            Error 1400, |This collection can only accept | & Me.m_contentType & |, passed value is | & actualType
        End If

        Return true
    End Function

    %REM
        Because we don't have OrElse. Used by remove()
        When we have OrElse, we can do:
        ' If (matchRemoved = True OrElse Me.m_comparator.compare(source, elem) <> 0) Then
    %END REM
    Private Function shouldAdd(matchRemoved as Boolean, source as Variant, elem as Variant) as Boolean
        Return (matchRemoved = True) || (Not Me.Comparator.equals(source, elem))
    End Function

    %REM
        Finds the position to insert a value into the Collection's content
        @param source           To insert into the List
        @return position       Where the element should be inserted
    %END REM
    Private Function findNextPosInList(source as Variant) as Long
        Dim interval As Long
        Dim idxLeft As Long
        Dim pos As Long
        Dim idxRight As Long
        Dim divisor As Integer
        Dim tmp As Variant
        Dim chunkFound as Boolean
        Dim intervalLoops as Integer

        ' No entries...put at element 0
        If (Not Me.hasContent) Then Return 0

        ' Before first entry...put at element 0
        If (Me.Comparator.compareAscDesc(source, Me.p_Content(0), Me.p_isCollReversed) = -1) Then Return 0

        ' After last entry, put at end of collection
        If (Me.Comparator.compareAscDesc(source, Me.p_Content(Me.ElementCount - 1), Me.p_isCollReversed) = 1) Then Return Me.ElementCount

        ' Chunking on quarters seems to work best on performance
        divisor = 4
        While (interval < ((Me.ElementCount - 1) / divisor))
            interval = (divisor * interval) + 1
        Wend

        %REM
            1. Chunk the collection into quarters (interval is mnumber of elements in the chunk).
            2. Find which quarter it should go in.
            3. Chunk that chunk into quarters.
            4. Repeat 2 and 3 until interval has been reduced to 0 <- we've found the exact position.
            - idxLeft = first entry in chunk, idxRight = last entry in that chunk, pos = place to put it
        %END REM
        idxLeft = 0
        idxRight = Me.ElementCount - 1
        While (interval > 0)
            chunkFound = false   'Reset
            intervalLoops = 0
            pos = idxLeft + interval
            Do While pos < idxRight
                intervalLoops++
                If (IsObject(Me.p_Content(pos))) Then
                    Set tmp = Me.p_Content(pos)
                Else
                    tmp = Me.p_Content(pos)
                End If
                ' Test against first entry in that chunk <- should it go before that entry
                If (Me.Comparator.compareAscDesc(source, tmp, Me.p_isCollReversed) = -1) Then
                    chunkFound = true
                    If (pos > interval Or Me.Comparator.isDescending) Then
                        idxLeft = pos - interval
                    End If
                    idxRight = pos + 1
                    Exit Do
                End If
                pos = pos + interval
            Loop
            If (Not chunkFound) Then
                idxLeft = pos - interval
            End If
            'Print "Interval " & interval & ": intervalLoops - " & intervalLoops & ", idxLeft - " & idxLeft & ", idxRight - " & idxRight
            interval = (interval - 1) / divisor
        WEnd

        Return pos

    End Function

    Private Function getDupePos(checkValue as Variant, pos as Long) as Variant
        Dim prevPos as Long
        If (pos => Me.m_elementCount) Then Return NULL

        If (pos < Me.elementCount) Then
            If (Me.Comparator.equals(checkValue, Me.p_Content(pos))) Then Return pos
        End If

        If (pos > 0) Then
            prevPos = pos - 1
            While (prevPos > -1 && Me.Comparator.compare(checkValue, Me.p_Content(prevPos)) > -1)
                If Me.Comparator.equals(checkValue, Me.p_Content(prevPos)) Then Return prevPos
                prevPos --
            Wend
        End If

        Return NULL
    End Function

    %REM
        Inserts an element into a sorted list at the relevant position
        @param source           To insert into the List
        @return 
    %END REM
    Private Function insertSorted(source as Variant) as Long
        Dim pos as Long
        Dim i as Long
        Dim checkIndex as Variant

        If (Not Me.hasContent) Then
            Call insertIntoContent(source, Me.m_elementCount++)
            Return 0
        End If

        pos = findNextPosInList(source)

        If (Me.isUnique) Then
            checkIndex = getDupePos(source, pos)
            If (Not IsNull(checkIndex)) Then Return checkIndex
        End If

        If (pos = Me.ElementCount) Then
            Call insertIntoContent(source, Me.ElementCount)
        Else
            ' Do not do a ForAll loop on a collection you're modifying!
            For i = (Me.ElementCount - 1) to pos Step -1
                Call insertIntoContent(Me.p_Content(i), i+1)
            Next
            Call insertIntoContent(source, pos)
        End If
        Me.m_elementCount++
        Return pos

    End Function

    %REM
        Adds a value to the p_Content array, handling needing to use "Set" for objects
    %END REM
    Private Sub insertIntoContent(sourceObj as Variant, index as Long)
        If (Me.p_isObjects) Then
            Set Me.p_Content(index) = sourceObj
        Else
            Me.p_Content(index) = sourceObj
        End If
    End Sub

    %REM
        Ensures content types being passed into New function are valid
    %END REM
    Private Function validateContentType() as Boolean

        Dim isOneScalar as Boolean

        If (Me.m_ContentType = "") Then Error 1400, "contentType should be a comma-delimited string of one or more explicit datatypes, or SCALAR or OBJECT"
        Me.p_allowedContents = Split(Me.m_contentType, ",")

        ForAll ct in Me.p_allowedContents
            Select Case ct
            Case "NULL","EMPTY","VARIANT","NOTHING","ARRAY","LIST":
                Error 1400, "Invalid data type for Collection: " & ct
            Case "SCALAR":
                If (UBound(Me.p_allowedContents) > 0) Then Error 1400, "SCALAR cannot be mixed with other datatypes"
            Case "STRING","INTEGER","LONG","SINGLE","DOUBLE","CURRENCY","DATE/TIME","BOOLEAN","BYTE":
                isOneScalar = True
            Case Else:
                If (ct = "OBJECT") Then
                    If (UBound(Me.p_allowedContents) > 0) Then Error 1400, "OBJECT cannot be mixed with other datatypes"
                End If
                Me.p_isObjects = True
            End Select
        End ForAll

        If (Me.p_isObjects And isOneScalar) Then
            Error 1400, "Invalid mixture of scalar and object datatypes"
        End If
        Return True

    End Function
	'}} 

End Class 


%REM
	Class StringCollection 
	Collection that can only contain strings or scalars, which will be converted to strings
 
%END REM
Public Class StringCollection As Collection 

	'{{SETI_AUTHOR_CODE_StringCollection_Private_Variables
	'}}

	'{{SETI_AUTHOR_CODE_StringCollection_Private_Properties    
	'}}


	%REM
		Sub New 

		@param	comparator 	Comparator, defaulting (if Nothing) to MatchingDataTypeComparator

		@param	mustBeUnique 	Flag indicating if the elements within the Collection must be unique

		@param	isSorted 	Flag indicating if the content within the Collection should be sorted

	%END REM
	Public Sub New(comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean), Collection("STRING", comparator, mustBeUnique, isSorted) 
		'{{SETI_AUTHOR_CODE_New_implementation
        If (comparator is Nothing) Then
            Set Me.m_comparator = New MatchingDataTypeComparator(false)
        End If
		'}}

	End Sub


	%REM
		Function getNthElement 
		Wrapper for CStr(Collection.getNthElementRaw(index)).
	
		@param	index 	Index of the element to return

		@return	String
	%END REM
	Public Function getNthElement(index As Long) As String 
		'{{SETI_AUTHOR_CODE_getNthElement_implementation
        Return Cstr(getNthElementRaw(index))
		'}}

	End Function


	%REM
		Function add 
		Overrides parent method, forcing to string if possible
	
		@param	source 	A stringable scalar value

		@return	Long
		@throws	Cannot convert passed value to a String 	
	%END REM
	Public Function add(source As Variant) As Long 
		'{{SETI_AUTHOR_CODE_add_implementation
        If (Not IsScalar(source)) Then
            If me.suppressErrors Then Return -1
            Error 1400, "Cannot convert passed value to a String"
        Else
            Return Collection..add(CStr(source))
        End If
		'}}

	End Function

	'{{SETI_AUTHOR_CODE_StringCollection_Private_Methods
	'}} 

End Class 


%REM
	Class CollectionFilter 
	Class for filtering elements when filtering a Collection
 
%END REM
Public Class CollectionFilter 

	'{{SETI_AUTHOR_CODE_CollectionFilter_Private_Variables
	'}}

	'{{SETI_AUTHOR_CODE_CollectionFilter_Private_Properties   
	'}}


	%REM
		Sub New 

	%END REM
	Public Sub New() 
		'{{SETI_AUTHOR_CODE_New_implementation
		'}}

	End Sub


	%REM
		Function filter 
		Function to filter an element "in" or "out" of the resulting collection
	
		@param	source 	True to filter the value *in*, False to filter *out*

		@return	Boolean
	%END REM
	Public Function filter(source As Variant) As Boolean 
		'{{SETI_AUTHOR_CODE_filter_implementation
        filter = true
		'}}

	End Function

	'{{SETI_AUTHOR_CODE_CollectionFilter_Private_Methods
	'}} 

End Class 


%REM
	Class CollectionTransformer 
	Class to transform elements in a Collection to something else
 
%END REM
Public Class CollectionTransformer 

	'{{SETI_AUTHOR_CODE_CollectionTransformer_Private_Variables
	'}}

	'{{SETI_AUTHOR_CODE_CollectionTransformer_Private_Properties
	'}}


	%REM
		Sub New 

	%END REM
	Public Sub New() 
		'{{SETI_AUTHOR_CODE_New_implementation
		'}}

	End Sub


	%REM
		Function transform 
		Function to transform a member of a Collection. If there is no return value, the element is skipped and nothing gets added to the new Collection for this element. Thus the function can perform a filter and a transform simultaneously.
	
		@param	source 	Value to transform

		@return	Variant
	%END REM
	Public Function transform(source As Variant) As Variant 
		'{{SETI_AUTHOR_CODE_transform_implementation
        Return source
		'}}

	End Function

	'{{SETI_AUTHOR_CODE_CollectionTransformer_Private_Methods
	'}} 

End Class 


%REM
	Class Comparator 
	Class used to handle comparison logic (used primarily for sorting Collection objects)
 
%END REM
Public Class Comparator 

	'{{SETI_AUTHOR_CODE_Comparator_Private_Variables
    Private m_isDescending as Boolean
	'}}


	%REM
		Property isDescending 

		@return	Boolean
	%END REM
	Public Property Get isDescending As Boolean 
		'{{SETI_AUTHOR_CODE_Get.isDescending_implementation
        isDescending = m_isDescending
		'}}

	End Property

	'{{SETI_AUTHOR_CODE_Comparator_Private_Properties
	'}}


	%REM
		Sub New 

		@param	isDescending 	Whether sorting should be in descending order

	%END REM
	Public Sub New(isDescending As Boolean) 
		'{{SETI_AUTHOR_CODE_New_implementation
        m_isDescending = isDescending
		'}}

	End Sub


	%REM
		Function compare 
		Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.
	
		@param	source 	Element being inserted

		@param	target 	Element at current position

		@return	Integer
	%END REM
	Public Function compare(source As Variant, target As Variant) As Integer 
		'{{SETI_AUTHOR_CODE_compare_implementation
        Dim dataTypeComparison as Integer
        dataTypeComparison = Me.compareDataType(source, target)

        If (dataTypeComparison <> 0) Then
            Return dataTypeComparison
        Else
            Return compareMatchingDataType(source, target)
        End If
		'}}

	End Function


	%REM
		Function equals 
		Function to determine if two values are determined to be identical.
Used by remove, replace, and contains functions
	
		@param	source 	Element being inserted

		@param	target 	Element at current position

		@return	Boolean
	%END REM
	Public Function equals(source As Variant, target As Variant) As Boolean 
		'{{SETI_AUTHOR_CODE_equals_implementation
        Dim dataTypeComparison as Integer
        dataTypeComparison = Me.compareDataType(source, target)

        If (dataTypeComparison <> 0) Then
            Return False
        Else
            Return CStr(source) = CStr(target)
        End If
		'}}

	End Function


	%REM
		Function compareAscDesc 
		Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.
The value is reversed (so -1 changed to 1, 1 changed to -1) if:
- Comparator is descending, but Collection is not reversed
- Comparator is ascending, but Collection is reversed
	
		@param	source 	Element being inserted

		@param	target 	Element at current position

		@param	collReversed 	Whether the parent Collection is reversed

		@return	Integer
	%END REM
	Public Function compareAscDesc(source As Variant, target As Variant, collReversed As Boolean) As Integer 
		'{{SETI_AUTHOR_CODE_compareAscDesc_implementation
        compareAscDesc = compare(source, target)

        If (Me.m_isDescending Xor collReversed) Then Return 0 - compareAscDesc Else Return compareAscDesc
		'}}

	End Function

	'{{SETI_AUTHOR_CODE_Comparator_Private_Methods
    Private Function compareDataType(source as Variant, target as Variant) as Integer
    Dim sourceDataType as Integer
        Dim targetDataType as Integer
        If (IsNumeric(source) And (DataType(source) < 7)) Then
            sourceDataType = 5
        Else
            sourceDataType = DataType(source)
        End If
        If (IsNumeric(target) And (DataType(target) < 7)) Then
            targetDataType = 5
        Else
            targetDataType = DataType(target)
        End If

        If (sourceDataType < targetDataType) Then
            Return -1
        ElseIf (sourceDataType > targetDataType) Then
            Return 1
        End If
    End Function

    Private Function compareMatchingDataType(source as Variant, target as Variant) as Integer
        Dim fixedSource as Integer
        Dim fixedTarget as Integer
        Dim compareSource as String
        Dim compareTarget as String

        If (CStr(source) = CStr(target)) Then
            Return 0
        End If

        If (IsNumeric(source) And (DataType(source) < 7)) Then
            ' Just doing CStr will mean 12.05 is before 9.05, which is wrong
            ' So compare integer portion first, then get fraction
            fixedSource = Fix(source)
            fixedTarget = Fix(target)
            If (fixedSource < fixedTarget) Then
                Return -1
            ElseIf (fixedSource > fixedTarget) Then
                Return 1
            Else
                compareSource = CStr(Fraction(source))
                compareTarget = CStr(Fraction(target))
            End If
        Else
            ' For non-numerics, we can just CStr the value
            compareSource = CStr(source)
            compareTarget = CStr(target)
        End If

        ' Now compare. We know they're not the same!
        If (compareSource < compareTarget) Then
            Return -1
        Else
                Return 1
        End If
    End Function
	'}} 

End Class 


%REM
	Class MatchingDataTypeComparator 
	Class for comparing, ignoring data type check
 
%END REM
Public Class MatchingDataTypeComparator As Comparator 

	'{{SETI_AUTHOR_CODE_MatchingDataTypeComparator_Private_Variables
	'}}

	'{{SETI_AUTHOR_CODE_MatchingDataTypeComparator_Private_Properties
	'}}


	%REM
		Sub New 

		@param	isDescending 	Whether sorting should be in descending order

	%END REM
	Public Sub New(isDescending As Boolean) 
		'{{SETI_AUTHOR_CODE_New_implementation
		'}}

	End Sub


	%REM
		Function compare 
		Overrides compare method in base class. Compare function, assuming both source and target are the same data type.
	
		@param	source 	Element being inserted

		@param	target 	Element at current position

		@return	Integer
	%END REM
	Public Function compare(source As Variant, target As Variant) As Integer 
		'{{SETI_AUTHOR_CODE_compare_implementation
        Return compareMatchingDataType(source, target)
		'}}

	End Function


	%REM
		Function equals 
		Fnction to determine if twi values are determined to be identical.
Used by remove, replace, and contains functions
	
		@param	source 	Element being inserted

		@param	target 	Element at current position

		@return	Boolean
	%END REM
	Public Function equals(source As Variant, target As Variant) As Boolean 
		'{{SETI_AUTHOR_CODE_equals_implementation
        Return CStr(source) = CStr(target)
		'}}

	End Function

	'{{SETI_AUTHOR_CODE_MatchingDataTypeComparator_Private_Methods
	'}} 

End Class 


'{{SETI_AUTHOR_CODE_Collections_Private_Classes
'}}
'{{SETI_AUTHOR_CODE_Collections_Private_Methods
'}} 
%REM
	Class Map 

%END REM
Public Class Map 

	'{{SETI_AUTHOR_CODE_Map_Private_Variables
    Private m_keySet as Collection
    Private m_ContentType as String
    Private m_suppressErrors as Boolean
    Private p_Values List as Variant
    Private p_allowedContents as Variant
    Private p_isObjects as Boolean
	'}}


	%REM
		Property elementCount 
		Number of elements in the map
	
		@return	Long
	%END REM
	Public Property Get elementCount As Long 
		'{{SETI_AUTHOR_CODE_Get.elementCount_implementation
        Return Me.m_KeySet.ElementCount
		'}}

	End Property


	%REM
		Property isLocked 
		Flag indicating if the Map is locked
	
		@return	Boolean
	%END REM
	Public Property Get isLocked As Boolean 
		'{{SETI_AUTHOR_CODE_Get.isLocked_implementation
        Return Me.m_keySet.isLocked
		'}}

	End Property


	%REM
		Property contentType 
		Content-Type of values within the map
	
		@return	String
	%END REM
	Public Property Get contentType As String 
		'{{SETI_AUTHOR_CODE_Get.contentType_implementation
        Return Me.m_ContentType
		'}}

	End Property


	%REM
		Property hasContent 
		Flag indicating if the Map has elements
	
		@return	Boolean
	%END REM
	Public Property Get hasContent As Boolean 
		'{{SETI_AUTHOR_CODE_Get.hasContent_implementation
        Return Me.m_KeySet.ElementCount > 0
		'}}

	End Property


	%REM
		Property isSorted 
		Flag indicating if the Map's keys are sorted
	
		@return	Boolean
	%END REM
	Public Property Get isSorted As Boolean 
		'{{SETI_AUTHOR_CODE_Get.isSorted_implementation
        Return Me.m_KeySet.isSorted
		'}}

	End Property


	%REM
		Property comparator 
		Comparator to compare keys with.
	
		@return	Comparator
	%END REM
	Public Property Get comparator As Comparator 
		'{{SETI_AUTHOR_CODE_Get.comparator_implementation
        Return Me.m_KeySet.comparator
		'}}

	End Property


	%REM
		Property suppressErrors 
		Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked
or attempting to putting an element at an index into a sorted Map.
Instead of throwing an error, e.g. for wrong content type, the method will just return false
	
		@return	Boolean
	%END REM
	Public Property Get suppressErrors As Boolean 
		'{{SETI_AUTHOR_CODE_Get.suppressErrors_implementation
        Return Me.m_suppressErrors
		'}}

	End Property


	%REM
		Property suppressErrors 
		Suppress errors on adding or inserting elements. Errors wll still be thrown if the Map is locked
or attempting to putting an element at an index into a sorted Map.
Instead of throwing an error, e.g. for wrong content type, the method will just return false
	
	%END REM
	Public Property Set suppressErrors As Boolean 
		'{{SETI_AUTHOR_CODE_Set.suppressErrors_implementation
        Me.m_suppressErrors = suppressErrors
		'}}

	End Property

	'{{SETI_AUTHOR_CODE_Map_Private_Properties	
    '}}


	%REM
		Sub reverse 
		Reverses the keySet colection of a Map.
	
		@throws	Map is locked 	
	%END REM
	Public Sub reverse() 
		'{{SETI_AUTHOR_CODE_reverse_implementation
        Call checkLocked()

        Call Me.m_KeySet.reverse()
		'}}

	End Sub


	%REM
		Sub clear 
		Removes all keys and values from the Map and resets whether the keyset is reversed.
	
		@throws	Map is locked 	
	%END REM
	Public Sub clear() 
		'{{SETI_AUTHOR_CODE_clear_implementation
        Call checkLocked()

        Call Me.m_KeySet.clear()
        Erase Me.p_Values
		'}}

	End Sub


	%REM
		Sub lock 
		Locks the map, so any put, remove, replace or reverse fiunctions trigger errors. Useful when passing a Map to other functions.
	
	%END REM
	Public Sub lock() 
		'{{SETI_AUTHOR_CODE_lock_implementation
        Call Me.m_keySet.lock()
		'}}

	End Sub


	%REM
		Sub unlock 
		Unlocks the Map, so put, remove, replace and reverse functions can be used again
	
	%END REM
	Public Sub unlock() 
		'{{SETI_AUTHOR_CODE_unlock_implementation
        Call me.m_keySet.unlock()
		'}}

	End Sub


	%REM
		Sub fromJson 
		Loads a JsonObject that contains an object of scalars into the Map
	
		@param	jsonObj 	JsonObject to put in the map

	%END REM
	Public Sub fromJson(jsonObj As JsonObject) 
		'{{SETI_AUTHOR_CODE_fromJson_implementation
        Dim array as Variant
        If (jsonObj.childCount = 0) Then Exit Sub
        
        If (Not jsonObj.isObject()) Then
            Error 1400, "A map can only accept an object"
        Else
            Try
                ForAll child in jsonObj.getChildren()
                    Call Me.put(child.label, child.scalarValue)
                End ForAll
            Catch
                If Not Me.suppressErrors Then 
                    Call getErrorSession.createErrorEntry(LOG_INFO)
                    Error Err(), Error$() 
                End If 
            End Try

        End If
		'}}

	End Sub


	%REM
		Sub New 
		Constructor
	
		@param	contentType 	Defines the Content Type of the values in the Map

		@param	keyComparator 	Comparator to determine order of keys

		@param	isSorted 	Flag indicatin if the keys within the Map shall be sorted

	%END REM
	Public Sub New(contentType As String, keyComparator As Comparator, isSorted As Boolean) 
		'{{SETI_AUTHOR_CODE_New_implementation
        Dim tempComparator as Comparator
        Me.m_contentType = FullTrim(UCase(contentType))
        Call validateContentType()

        If (keyComparator is Nothing) Then
            Set tempComparator = New Comparator(False)
        Else
            Set tempComparator = keyComparator
        End If
        Set me.m_keySet = New Collection("SCALAR", tempComparator, true, isSorted)
		'}}

	End Sub


	%REM
		Sub transform 
		Transforms members of this Map usig a MapTransformer and adds them to the new Map passed.
	
		@param	transformer 	MapTrasformer to transform members

		@param	newMap 	Map to load transformed members into

	%END REM
	Public Sub transform(transformer As MapTransformer, newMap As Map) 
		'{{SETI_AUTHOR_CODE_transform_implementation
        Dim innerTransformer as MapTransformer
        Dim i as Long
        Dim keyVal as Variant
        Dim returnVal as Pair

        If (Not me.hasContent) Then Exit Sub

        If (transformer is Nothing) Then
            Set innerTransformer = new MapTransformer()
        Else
            Set innerTransformer = transformer
        End If

        If Me.suppressErrors Then newMap.suppressErrors = True

        Do
            Try
                Set returnVal = innerTransformer.transform(Me.getNthPair(i))
                If (Not returnVal is Nothing) Then
                    Call newMap.putPair(returnVal)
                End If
            Catch
                If Not Me.suppressErrors Then 
                    Call getErrorSession.createCustomErrorEntry(Error$() & | (iteration | & i & |)|, 0, 0, LOG_INFO)
                    Error Err(), Error$() 
                End If 
            End Try

        Loop While ++i < Me.ElementCount

        If Me.suppressErrors Then newMap.suppressErrors = False
		'}}

	End Sub


	%REM
		Function clone 
		Creates a clone of the Map.
	
		@return	Map
	%END REM
	Public Function clone() As Map 
		'{{SETI_AUTHOR_CODE_clone_implementation
        Dim newMap as New Map(Me.ContentType, Me.Comparator, Me.isSorted)
        Dim i as long
        Dim pair as Pair

        newMap.suppressErrors = Me.suppressErrors

        If Not me.hasContent Then Return newMap

        Do
            Set pair = Me.getNthPair(i)
            Call newMap.putPair(pair)
        Loop While ++i < Me.ElementCount

        Return newMap
		'}}

	End Function


	%REM
		Function removeByKey 
		Removes an element from the Map based on its key.
	
		@param	keyVal 	Key of element to remove

		@return	Boolean
		@throws	Map is locked 	
	%END REM
	Public Function removeByKey(keyVal As Variant) As Boolean 
		'{{SETI_AUTHOR_CODE_removeByKey_implementation
        Call checkLocked()

        If (Me.m_KeySet.remove(keyVal, true) > 0) Then
            Erase Me.p_Values(keyVal)
            Return True
        End If
		'}}

	End Function


	%REM
		Function putAll 
		Puts all entries from a Map into this map
	
		@param	source 	Map to copy into this Map

		@return	Map
		@throws	Map is locked 	
		@throws	If incorrect data type is passed 	
	%END REM
	Public Function putAll(source As Map) As Map 
		'{{SETI_AUTHOR_CODE_putAll_implementation
        Call checkLocked()

        Dim i as Long
        Do
            Call putPair(source.getNthPair(i))
        Loop While ++i < source.ElementCount
        Return Me
		'}}

	End Function


	%REM
		Function getNthKeyRaw 
		Returns the key at a particular index
	
		@param	index 	Index of key to get, starting at 0

		@return	Variant
	%END REM
	Public Function getNthKeyRaw(index As Long) As Variant 
		'{{SETI_AUTHOR_CODE_getNthKeyRaw_implementation
        Return Me.m_KeySet.getNthElementRaw(index)
		'}}

	End Function


	%REM
		Function collectKeys 
		Returns a clone of the keys in this Map.
	
		@return	Collection
	%END REM
	Public Function collectKeys() As Collection 
		'{{SETI_AUTHOR_CODE_collectKeys_implementation
        Return Me.m_keySet.clone()
		'}}

	End Function


	%REM
		Function getNthPair 
		Returns the element at the relevant index as a key/value Pair
	
		@param	index 	Index at which to find the element

		@return	Pair
	%END REM
	Public Function getNthPair(index As Long) As Pair 
		'{{SETI_AUTHOR_CODE_getNthPair_implementation
        Dim keyVal as Variant
        keyVal = getNthKeyRaw(index)
        If (IsEmpty(keyVal)) Then Return Nothing

        Return new Pair(keyVal, Me.p_Values(keyVal))
		'}}

	End Function


	%REM
		Function toJson 
		Converts the Map to a JsonObject. If the values are objects, the code will try to call a toJson method on the object, otherwise skip them.
	
		@return	JsonObject
	%END REM
	Public Function toJson() As JsonObject 
		'{{SETI_AUTHOR_CODE_toJson_implementation
        Dim i as Long
        Dim result as New JsonObject()
        Dim temp as JsonObject
        If (Not Me.hasContent) Then Return result
        Do
            If (IsObject(Me.getNthValueRaw(i))) Then
                Try
                    Set temp = Me.getNthValueRaw(i).toJson()
                    Call result.insertValue(Me.m_keySet.getNthElementRaw(i), temp)
                Catch
                    If Not Me.suppressErrors Then Call getErrorSession.createErrorEntry(LOG_INFO)
                End Try
            Else
                Call result.insertValue(Me.m_keySet.getNthElementRaw(i), Me.getNthValueRaw(i))
            End If
        Loop While ++i < Me.ElementCount
        Return result
		'}}

	End Function


	%REM
		Function getValueRawByKey 
		Gets a value from the Map for the passed key. If the Map contains objects, the return type is Nothing.
If the Map contains scalars, the return type is an empty variant.
	
		@param	keyVal 	Key of value to get

		@return	Variant
	%END REM
	Public Function getValueRawByKey(keyVal As Variant) As Variant 
		'{{SETI_AUTHOR_CODE_getValueRawByKey_implementation
        If (Not IsElement(Me.p_Values(CStr(keyVal)))) Then
            If (Me.p_isObjects) Then Return Nothing
        Else
            Return Me.p_Values(keyVal)
        End If
		'}}

	End Function


	%REM
		Function containsKey 
		Checks whether the Map contains a specific key.
	
		@param	keyVal 	Value to check for

		@return	Boolean
	%END REM
	Public Function containsKey(keyVal As Variant) As Boolean 
		'{{SETI_AUTHOR_CODE_containsKey_implementation
        Return Me.m_keySet.contains(keyVal)
		'}}

	End Function


	%REM
		Function contains 
		Checks whether the Map contains a specific value.
	
		@param	checkValue 	Value to check for

		@param	valueComparator 	Comparator to use to check vale

		@return	Boolean
	%END REM
	Public Function contains(checkValue As Variant, valueComparator As Comparator) As Boolean 
		'{{SETI_AUTHOR_CODE_contains_implementation
        Dim innerComparator as New Comparator(false)
        If (Not valueComparator is Nothing) Then
            Set innerComparator = valueComparator
        End If

        ForAll elem in Me.p_Values
            If (innerComparator.equals(checkValue, elem)) Then
                Return True
                Exit Function
            End If
        End ForAll
		'}}

	End Function


	%REM
		Function getNthValueRaw 
		Gets the value at a particular index. If no matching value is found, the return type will depend on the content defined. If the Map contains objects, the return value is Nothing. If the Map contains scalars, the return value is an empty variant.
	
		@param	index 	Index of the value to get, starting at 0

		@return	Variant
	%END REM
	Public Function getNthValueRaw(index As Long) As Variant 
		'{{SETI_AUTHOR_CODE_getNthValueRaw_implementation
        Dim keyVal as String
        keyVal = getNthKeyRaw(index)
        If (IsEmpty(keyVal)) Then
            If (Me.p_isObjects) Then Return Nothing
        Else
            If (Not IsElement(Me.p_Values(CStr(keyVal)))) Then
                If (Me.p_isObjects) Then Return Nothing
            Else
                Return Me.p_Values(keyVal)
            End If
        End If
		'}}

	End Function


	%REM
		Function getAndRemoveLastPair 
		Gets and removes the last key/value Pair
	
		@return	Pair
		@throws	Map is locked 	
	%END REM
	Public Function getAndRemoveLastPair() As Pair 
		'{{SETI_AUTHOR_CODE_getAndRemoveLastPair_implementation
        Dim tempVal as Pair
        Call checkLocked()

        Dim keyVal as Variant
        keyVal = Me.m_KeySet.getAndRemoveLastRaw()
        If (IsEmpty(keyVal)) Then Return Nothing

        Set tempVal= new Pair(keyVal, Me.p_Values(keyVal))
        Erase Me.p_Values(keyVal)
        Return tempVal
		'}}

	End Function


	%REM
		Function getAndRemoveFirstPair 
		Gets and removes the first key/value Pair.
	
		@return	Pair
		@throws	Map is locked 	
	%END REM
	Public Function getAndRemoveFirstPair() As Pair 
		'{{SETI_AUTHOR_CODE_getAndRemoveFirstPair_implementation
        Dim tempVal as Pair
        Call checkLocked()

        Dim keyVal as Variant
        keyVal = Me.m_KeySet.getAndRemoveFirstRaw()
        If (IsEmpty(keyVal)) Then Return Nothing

        Set tempVal = new Pair(keyVal, Me.p_Values(keyVal))
        Erase Me.p_Values(keyVal)
        Return tempVal
		'}}

	End Function


	%REM
		Function put 
		Puta an element in the Map.
	
		@param	key 	Scalar value to use as the key

		@param	value 	Value to put into the Map

		@return	Long
		@throws	Map is locked 	
		@throws	If incorrect data type is passed 	
	%END REM
	Public Function put(key As Variant, value As Variant) As Long 
		'{{SETI_AUTHOR_CODE_put_implementation
        Call checkLocked()

        Dim actualType as String
        Dim assignedIndex as Long

        Try
            If Not continueAdd(value) Then Return -1

            assignedIndex = getAssignedIndex(key)
            If (assignedIndex > -1) Then
                If (Me.p_isObjects) Then
                    Set Me.p_Values(CStr(key)) = value
                Else
                    Me.p_Values(CStr(key)) = value
                End If
            End If

            Return assignedIndex

        Catch
            If Not Me.suppressErrors Then 
                Call getErrorSession.createErrorEntry(LOG_INFO)
                Error Err(), Error$() 
            End If 
        End Try
		'}}

	End Function


	%REM
		Function putPair 
		Puts a Pair into the Map, using key as the key and value as the Value.
	
		@param	content 	Pair to insert

		@return	Long
		@throws	Map is locked 	
		@throws	If incorrect data type is passed 	
	%END REM
	Public Function putPair(content As Pair) As Long 
		'{{SETI_AUTHOR_CODE_putPair_implementation
        Call checkLocked()

        Return Me.put(content.key, content.value)
		'}}

	End Function


	%REM
		Function filter 
		Filters a Map using a mapFilter and returns a new "filtered" Map.
	
		@param	filterObj 	Map filter to check each key and value with

		@return	Map
	%END REM
	Public Function filter(filterObj As MapFilter) As Map 
		'{{SETI_AUTHOR_CODE_filter_implementation
        Dim newMap as New Map(Me.ContentType, Me.Comparator, Me.isSorted)
        Dim i as long
        Dim innerFilter as MapFilter
        Dim pair as Pair

        If (Not Me.hasContent) Then
            Return newMap
        End If

        ' Not just best practice, this is required. We cannot re-set filterObj in a function
        If (filterObj is Nothing) Then
            Set innerFilter = new MapFilter()
        Else
            Set innerFilter = filterObj
        End If

        If (me.suppressErrors) Then newMap.suppressErrors = True

        Do
            Set pair = Me.getNthPair(i)
            If (innerFilter.filter(pair)) Then
                Call newMap.putPair(pair)
            End If
        Loop While ++i < Me.ElementCount

        If (me.suppressErrors) Then newMap.suppressErrors = False

        Return newMap
		'}}

	End Function


	%REM
		Function removeByValue 
		Removes a value or values from the Map
	
		@param	value 	Value to remove

		@param	allMatches 	Whether to remove all matches or just the first match

		@param	valueComparator 	Comparator to use to check value

		@return	Boolean
		@throws	Map is locked 	
	%END REM
	Public Function removeByValue(value As Variant, allMatches As Boolean, valueComparator As Comparator) As Boolean 
		'{{SETI_AUTHOR_CODE_removeByValue_implementation
        Dim matchRemoved as Boolean
        Call checkLocked()

        Dim innerComparator as New Comparator(false)
        If (Not valueComparator is Nothing) Then
            Set innerComparator = valueComparator
        End If

        Dim keyVal as Variant
        ForAll elem in Me.p_Values
            If (innerComparator.equals(value, elem)) Then
                keyVal = ListTag(elem)
                matchRemoved = removeByKey(keyVal)
                If (Not allMatches) Then Exit ForAll
            End If
        End ForAll

        Return matchRemoved
		'}}

	End Function


	%REM
		Function collectValues 
		Loads the values from this Map into the passed Collection.
	
		@param	targetColl 	Collection into which to add the values from this Map

		@return	Collection
	%END REM
	Public Function collectValues(targetColl As Collection) As Collection 
		'{{SETI_AUTHOR_CODE_collectValues_implementation
        Dim i as Long

        If me.suppressErrors Then targetColl.suppressErrors = True

        Do
            Call targetColl.add(getNthValueRaw(i))
        Loop While ++i < Me.ElementCount

        If me.suppressErrors Then targetColl.suppressErrors = False
		'}}

	End Function

    %REM
        Destructor
    %END REM
    Sub Delete
        Erase p_Values
    End Sub
    

	'{{SETI_AUTHOR_CODE_Map_Private_Methods


    %REM
        Can be removed once we have OrElse
    %END REM
    Private Function allRemoved(keyVal as Variant, removeAll as Boolean) as Boolean
        If (removeAll) Then Return True

        Return Not Me.m_KeySet.contains(keyVal)
    End Function

    %REM
        Throws an error if the Map is locked
    %END REM
    Private Function checkLocked() as Boolean
        If Me.isLocked Then Error 1403, "Map is locked"
    End Function

    %REM
        Checks whether the incoming value is not an empty Variant, checks content type and checks for dupes
    %END REM
    Private Function continueAdd(source as Variant) as Boolean
        Dim actualType as String

        actualType = TypeName(source)
    
        If Me.suppressErrors Then 
            If (Me.m_contentType = "SCALAR") Then
                If (Not isScalar(source)) Then Return False 
                If (isEmpty(source)) Then Return False 

            ElseIf (Me.m_contentType = "OBJECT") Then
                If (Not isObject(source)) Then Return False 
                If (source is Nothing) Then Return False 

            Else
                ForAll ct in Me.p_allowedContents
                    If (actualType = ct) Then
                        Return True
                    End If
                End ForAll

                Return False 
            End If

        Else 
            If (Me.m_contentType = "SCALAR") Then
                If (Not isScalar(source)) Then Error 1400, |This map can only accept SCALARS, passed value is | & actualType
                If (isEmpty(source)) Then Error 1400, |This map can only accept SCALARS, passed value is | & actualType

            ElseIf (Me.m_contentType = "OBJECT") Then
                If (Not isObject(source)) Then Error 1400, |This map can only accept OBJECTS, passed value is | & actualType
                If (source is Nothing) Then Error 1400, |This map can only accept SCALARS, passed value is NOTHING|

            Else
                ForAll ct in Me.p_allowedContents
                    If (actualType = ct) Then
                        Return True
                    End If
                End ForAll

                Error 1400, |This map can only accept | & Me.m_contentType & |, passed value is | & actualType
            End If
        End If 

        Return true
    End Function

    %REM
        Will return a value if the key can be added or already exists in the Collection
    %END REM
    Private Function getAssignedIndex(key as Variant) as Long
        Try
            Return Me.m_keySet.add(key)
        Catch
            If Not Me.suppressErrors Then 
                Call getErrorSession.createErrorEntry(LOG_INFO)
                Error Err(), Error$() 
            End If 
        End Try
    End Function

    %REM
        Ensures content types being passed into New function are valid
    %END REM
    Private Function validateContentType() as Boolean

        Dim isOneScalar as Boolean

        If (Me.m_ContentType = "") Then Error 1400, "contentType should be a comma-delimited string of one or more explicit datatypes, or SCALAR or OBJECT"
        Me.p_allowedContents = Split(Me.m_contentType, ",")

        ForAll ct in Me.p_allowedContents
            Select Case ct
            Case "NULL","EMPTY","VARIANT","NOTHING","ARRAY","LIST":
                Error 1400, "Invalid data type for Collection: " & ct

            Case "SCALAR":
                If (UBound(Me.p_allowedContents) > 0) Then Error 1400, "SCALAR cannot be mixed with other datatypes"

            Case "STRING","INTEGER","LONG","SINGLE","DOUBLE","CURRENCY","DATE/TIME","BOOLEAN","BYTE":
                isOneScalar = True

            Case Else:
                If (ct = "OBJECT") Then
                    If (UBound(Me.p_allowedContents) > 0) Then Error 1400, "OBJECT cannot be mixed with other datatypes"
                End If
                Me.p_isObjects = True
            End Select
        End ForAll

        If (Me.p_isObjects And isOneScalar) Then
            Error 1400, "Invalid mixture of scalar and object datatypes"
        End If

        Return True

    End Function
	'}} 

End Class 


%REM
	Class MapFilter 
	Class for filtering elements when filtering a Map
 
%END REM
Public Class MapFilter 

	'{{SETI_AUTHOR_CODE_MapFilter_Private_Variables
	'}}

	'{{SETI_AUTHOR_CODE_MapFilter_Private_Properties
	'}}


	%REM
		Sub New 
		Constructor
	
	%END REM
	Public Sub New() 
		'{{SETI_AUTHOR_CODE_New_implementation
		'}}

	End Sub


	%REM
		Function filter 
		Function to filter a Map's keys or values
	
		@param	kvPair 	Pair containg the key and value for the current element in the Map

		@return	Boolean
	%END REM
	Public Function filter(kvPair As Pair) As Boolean 
		'{{SETI_AUTHOR_CODE_filter_implementation
        Return true
		'}}

	End Function

	'{{SETI_AUTHOR_CODE_MapFilter_Private_Methods
	'}} 

End Class 


%REM
	Class MapTransformer 
	Class for transforming elements in a Map to something else
 
%END REM
Public Class MapTransformer 

	'{{SETI_AUTHOR_CODE_MapTransformer_Private_Variables
	'}}

	'{{SETI_AUTHOR_CODE_MapTransformer_Private_Properties
	'}}


	%REM
		Sub New 

	%END REM
	Public Sub New() 
		'{{SETI_AUTHOR_CODE_New_implementation
		'}}

	End Sub


	%REM
		Function transform 
		Function to transform a member of a value. If there is no return value, the element is skipped and nothing gets added to the new Map for this element.
Thus this function can perform a filter and a transform simultaneously.
	
		@param	kvPair 	Pair containing key and value for the current element in the Map

		@return	Pair
	%END REM
	Public Function transform(kvPair As Pair) As Pair 
		'{{SETI_AUTHOR_CODE_transform_implementation
        Return new Pair(kvPair.key, kvPair.value)
		'}}

	End Function

	'{{SETI_AUTHOR_CODE_MapTransformer_Private_Methods
	'}} 

End Class 


%REM
	Class Pair 
	Base class for ky/value pair
 
%END REM
Public Class Pair 

	'{{SETI_AUTHOR_CODE_Pair_Private_Variables
    Private m_key as Variant
    Private m_value as Variant
	'}}


	%REM
		Property value 

		@return	Variant
	%END REM
	Public Property Get value As Variant 
		'{{SETI_AUTHOR_CODE_Get.value_implementation
        Return m_value
		'}}

	End Property


	%REM
		Property key 
		Key for the pair
	
		@return	Variant
	%END REM
	Public Property Get key As Variant 
		'{{SETI_AUTHOR_CODE_Get.key_implementation
        key = m_key
		'}}

	End Property

	'{{SETI_AUTHOR_CODE_Pair_Private_Properties
	'}}


	%REM
		Sub New 

		@param	key 	Key for the pair. Required at initialization, cannot be changed afterwards.

		@param	value 	Value for the pair. Required at initialization, cannot be changed afterwards.

	%END REM
	Public Sub New(key As Variant, value As Variant) 
		'{{SETI_AUTHOR_CODE_New_implementation
        If (isObject(key)) Then
            If (CStr(key) = "") Then Error 1400, "Key must be a scalar value"
        Else
            If (CStr(key) = "") Then Error 1400, "Key must not be empty"
            Me.m_key = key
        End If

        If (isObject(value)) Then
            Set Me.m_value = value
        Else
            Me.m_value = value
        End If
		'}}

	End Sub

	'{{SETI_AUTHOR_CODE_Pair_Private_Methods
	'}} 

End Class 
'{{SETI_AUTHOR_CODE_VoltScriptCollections_Private_Classes
'}}

'{{SETI_AUTHOR_CODE_VoltScriptCollections_Private_Methods
'}} 
