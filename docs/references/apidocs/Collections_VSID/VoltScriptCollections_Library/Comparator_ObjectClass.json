{"classname":"Comparator","comment":"Class used to handle comparison logic (used primarily for sorting Collection objects)","valuetype":"","filenamebase":"Comparator_ObjectClass","fqnprefix":"Collections.VoltScriptCollections","qn":"Comparator","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"C447C84BFFA4943D80258994003C6C13","signature":"Public Class Comparator","modifiers":"Public","classname":"Comparator","parentclassname":"None","constructorsignature":"Public Sub New(isDescending As Boolean)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class used to handle comparison logic (used primarily for sorting Collection objects)&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class used to handle comparison logic (used primarily for sorting Collection objects)","inlinecomment":" \t &amp;apos; Class used to handle comparison logic (used primarily for sorting Collection objects)","codesamplehtml":"", "methods":[{"label":"compare","comment":"Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.","valuetype":"Integer","filenamebase":"compare_Method","fqnprefix":"Collections.VoltScriptCollections.Comparator","qn":"compare","codesample":"%REM\nThe following code is Comparator.compareAscDesc.\n%END REM\nPublic Function compareAscDesc(source as Variant, target as Variant, collReversed as Boolean) as Integer\n    compareAscDesc = compare(source, target)\n    If (m_isDescending Xor collreversed) Then Return 0 - compareAscDesc Else Return compareAscDesc\nEnd Function","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant, target As Variant)","signature":"Public Function compare(source As Variant, target As Variant) As Integer","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.","inlinecomment":" \t &amp;apos; Main function that does the comparison. Only needs to code for natural before/after. The outer function will reverse the result if the Comparator is instantiated as descending order or Collection has been reversed.","parentclassname":"Comparator","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is Comparator.compareAscDesc.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Public Function compareAscDesc(source as Variant, target as Variant, collReversed as Boolean) as Integer&amp;lt;br /&amp;gt;    compareAscDesc = compare(source, target)&amp;lt;br /&amp;gt;    If (m_isDescending Xor collreversed) Then Return 0 - compareAscDesc Else Return compareAscDesc&amp;lt;br /&amp;gt;End Function", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsComparatorcompare","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element being inserted&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element being inserted","inlinecomment":" \t &amp;apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsComparatorcompare","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element at current position&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element at current position","inlinecomment":" \t &amp;apos; Element at current position"}]},{"label":"compareAscDesc","comment":"Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.\nThe value is reversed (so -1 changed to 1, 1 changed to -1) if:\n- Comparator is descending, but Collection is not reversed\n- Comparator is ascending, but Collection is reversed","valuetype":"Integer","filenamebase":"compareAscDesc_Method","fqnprefix":"Collections.VoltScriptCollections.Comparator","qn":"compareAscDesc","codesample":"%REM\nThe following code is abbreviated code from Collection.getIndex. It compares each element against the value being checked, and if it matches, returns the current index.\n%END REM\nPublic Function getIndex(checkValue as Variant) as Variant\n    ForAll elem in Me.p_content)\n        If (Me.Comparator.compareAscDesc(checkValue, elem, Me.p_isCollReversed) = 0) Then Return ListTag(elem)\n    End ForAll\nEnd Function","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As Variant, collReversed As Boolean)","signature":"Public Function compareAscDesc(source As Variant, target As Variant, collReversed As Boolean) As Integer","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.&amp;lt;br /&amp;gt;The value is reversed (so -1 changed to 1, 1 changed to -1) if:&amp;lt;br /&amp;gt;- Comparator is descending, but Collection is not reversed&amp;lt;br /&amp;gt;- Comparator is ascending, but Collection is reversed&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.&amp;lt;br /&amp;gt;The value is reversed (so -1 changed to 1, 1 changed to -1) if:&amp;lt;br /&amp;gt;- Comparator is descending, but Collection is not reversed&amp;lt;br /&amp;gt;- Comparator is ascending, but Collection is reversed","inlinecomment":" \t &amp;apos; Compares source and target, returning -1 if source is before target, 0 if they are the same, 1 if source is after target.\nThe value is reversed (so -1 changed to 1, 1 changed to -1) if:\n- Comparator is descending, but Collection is not reversed\n- Comparator is ascending, but Collection is reversed","parentclassname":"Comparator","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is abbreviated code from Collection.getIndex. It compares each element against the value being checked, and if it matches, returns the current index.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Public Function getIndex(checkValue as Variant) as Variant&amp;lt;br /&amp;gt;    ForAll elem in Me.p_content)&amp;lt;br /&amp;gt;        If (Me.Comparator.compareAscDesc(checkValue, elem, Me.p_isCollReversed) = 0) Then Return ListTag(elem)&amp;lt;br /&amp;gt;    End ForAll&amp;lt;br /&amp;gt;End Function", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsComparatorcompareAscDesc","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element being inserted&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element being inserted","inlinecomment":" \t &amp;apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsComparatorcompareAscDesc","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element at current position&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element at current position","inlinecomment":" \t &amp;apos; Element at current position"},{"label":"collReversed","comment":"Whether the parent Collection is reversed","valuetype":"Boolean","filenamebase":"collReversed_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsComparatorcompareAscDesc","qn":"collReversed","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether the parent Collection is reversed&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether the parent Collection is reversed","inlinecomment":" \t &amp;apos; Whether the parent Collection is reversed"}]},{"label":"equals","comment":"Function to determine if two values are determined to be identical.\nUsed by remove, replace, and contains functions","valuetype":"Boolean","filenamebase":"equals_Method","fqnprefix":"Collections.VoltScriptCollections.Comparator","qn":"equals","codesample":"%REM\nThe following code is Collection.getIndex().\n%END REM\nForAll elem in p_content\n    If (Me.comparator.equals(checkValue, elem)) Then Return ListTag(elem)\nEnd ForAll","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As Variant)","signature":"Public Function equals(source As Variant, target As Variant) As Boolean","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Function to determine if two values are determined to be identical.&amp;lt;br /&amp;gt;Used by remove, replace, and contains functions&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Function to determine if two values are determined to be identical.&amp;lt;br /&amp;gt;Used by remove, replace, and contains functions","inlinecomment":" \t &amp;apos; Function to determine if two values are determined to be identical.\nUsed by remove, replace, and contains functions","parentclassname":"Comparator","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is Collection.getIndex().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;ForAll elem in p_content&amp;lt;br /&amp;gt;    If (Me.comparator.equals(checkValue, elem)) Then Return ListTag(elem)&amp;lt;br /&amp;gt;End ForAll", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsComparatorequals","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element being inserted&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element being inserted","inlinecomment":" \t &amp;apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsComparatorequals","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element at current position&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element at current position","inlinecomment":" \t &amp;apos; Element at current position"}]},{"label":"isDescending","comment":"","valuetype":"Boolean","filenamebase":"isDescending_Method","fqnprefix":"Collections.VoltScriptCollections.Comparator","qn":"Get.isDescending","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isDescending As Boolean","modifiers":"Public Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"Comparator","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"Collections.VoltScriptCollections.Comparator","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(isDescending As Boolean)","signature":"Public Sub New(isDescending As Boolean)","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"Comparator","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"isDescending","comment":"Whether sorting should be in descending order","valuetype":"Boolean","filenamebase":"isDescending_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsComparatorNew","qn":"isDescending","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether sorting should be in descending order&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether sorting should be in descending order","inlinecomment":" \t &amp;apos; Whether sorting should be in descending order"}]}]}
