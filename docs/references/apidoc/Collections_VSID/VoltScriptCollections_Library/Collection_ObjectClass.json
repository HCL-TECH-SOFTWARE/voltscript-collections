{"classname":"Collection","comment":"Base class for Collections","valuetype":"","filenamebase":"Collection_ObjectClass","fqnprefix":"Collections.VoltScriptCollections","qn":"Collection","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"F394C037755FD326802589950053668D","signature":"Public Class Collection","modifiers":"Public","classname":"Collection","parentclassname":"None","constructorsignature":"Public Sub New(contentType As String, comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Base class for Collections&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","inlinecomment":" \t &amp;apos; Base class for Collections","commenthtml":"Base class for Collections","codesamplehtml":"", "methods":[{"label":"add","comment":"Adds an element to the container","valuetype":"Long","filenamebase":"add_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"add","codesample":"%REM\nThe following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim success as Boolean\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will not get to this line\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed\nEnd Try\nsuccess = coll.add(&amp;quot;2&amp;quot;)\nPrint success    &amp;apos; Code will print False","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function add(source As Variant) As Long","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds an element to the container&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds an element to the container","inlinecomment":" \t &amp;apos; Adds an element to the container","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim success as Boolean&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    success = coll.add(2)&amp;lt;br /&amp;gt;    Print success    &amp;apos; Code will not get to this line&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed&amp;lt;br /&amp;gt;End Try&amp;lt;br /&amp;gt;success = coll.add(&amp;quot;2&amp;quot;)&amp;lt;br /&amp;gt;Print success    &amp;apos; Code will print False", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Must match Collection&amp;apos;s ContentType","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionadd","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Must match Collection&amp;apos;s ContentType&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Must match Collection&amp;apos;s ContentType","inlinecomment":" \t &amp;apos; Must match Collection&amp;apos;s ContentType"}]},{"label":"addAll","comment":"Adds all elements from an array or source Collection to the current Collection.","valuetype":"Collection","filenamebase":"addAll_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"addAll","codesample":"%REM\nThe following code creates a collection of scalars containing &amp;quot;One&amp;quot; and 2. It sets suppressErrors on the second collection, then adds the first collection to the second. This adds any strings to the second collection (i.e. &amp;quot;One&amp;quot;), while suppressing errors from any non-String entries (i.e. 2). The second collection contains one element, the string &amp;quot;One&amp;quot;.\n%END REM\nDim coll as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)\nDim coll2 as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(2)\ncoll2.suppressErrors = True\nCall coll2.addAll(coll)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function addAll(source As Variant) As Collection","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds all elements from an array or source Collection to the current Collection.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds all elements from an array or source Collection to the current Collection.","inlinecomment":" \t &amp;apos; Adds all elements from an array or source Collection to the current Collection.","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code creates a collection of scalars containing &amp;quot;One&amp;quot; and 2. It sets suppressErrors on the second collection, then adds the first collection to the second. This adds any strings to the second collection (i.e. &amp;quot;One&amp;quot;), while suppressing errors from any non-String entries (i.e. 2). The second collection contains one element, the string &amp;quot;One&amp;quot;.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim coll2 as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(2)&amp;lt;br /&amp;gt;coll2.suppressErrors = True&amp;lt;br /&amp;gt;Call coll2.addAll(coll)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant array or Collection of elements matching the Collection&amp;apos;s ContentType","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionaddAll","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant array or Collection of elements matching the Collection&amp;apos;s ContentType&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant array or Collection of elements matching the Collection&amp;apos;s ContentType","inlinecomment":" \t &amp;apos; Variant array or Collection of elements matching the Collection&amp;apos;s ContentType"}]},{"label":"clone","comment":"Creates a copy of the Collection","valuetype":"Collection","filenamebase":"clone_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"clone","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim coll1 as Collection\nCall coll.add(&amp;quot;One&amp;quot;)\nSet coll1 = coll.clone()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function clone() As Collection","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Creates a copy of the Collection&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Creates a copy of the Collection","inlinecomment":" \t &amp;apos; Creates a copy of the Collection","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim coll1 as Collection&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Set coll1 = coll.clone()", "signatureelements":["Public","Function"]},{"label":"contains","comment":"Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.","valuetype":"Boolean","filenamebase":"contains_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"contains","codesample":"%REM\nAlthough no explicit comparator is passed into this Collection, an instance of the default Comparator class is used. This works for scalars, by comparing the datatype (treating all numerics as the same datatype) and then CStr-ing the value.\n%END REM\nDim coll as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(2)\nPrint coll.contains(1)   &amp;apos; Prints False\nPrint coll.contains(2)   &amp;apos; Prints True","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(checkValue As Variant)","signature":"Public Function contains(checkValue As Variant) As Boolean","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.","inlinecomment":" \t &amp;apos; Checks whether the Collection contains a specific value. Requires a valid Comparator to compare each element.","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Although no explicit comparator is passed into this Collection, an instance of the default Comparator class is used. This works for scalars, by comparing the datatype (treating all numerics as the same datatype) and then CStr-ing the value.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(2)&amp;lt;br /&amp;gt;Print coll.contains(1)   &amp;apos; Prints False&amp;lt;br /&amp;gt;Print coll.contains(2)   &amp;apos; Prints True", "signatureelements":["Public","Function"], "arguments":[{"label":"checkValue","comment":"Value to check for","valuetype":"Variant","filenamebase":"checkValue_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectioncontains","qn":"checkValue","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to check for&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to check for","inlinecomment":" \t &amp;apos; Value to check for"}]},{"label":"filter","comment":"Filters a collection using a CollectionFilter and returns a new &amp;quot;filtered&amp;quot; collection","valuetype":"Collection","filenamebase":"filter_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"filter","codesample":"%REM\nThe following code shows how to create a filter for even numbers and use it. The code is very basic with no error handling.\n%END REM\nClass EvenFilterer as CollectionFilter\n    Function filter(source as Variant) as Boolean\n        If (source Mod 2 = 0) Then Return True\n    End Function\nEnd Class\nDim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nDim coll2 as Collection\nDim filterer as New EvenFilterer()\n&amp;apos; Populating collection omitted\nSet coll2 = coll1.filter(filterer)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(filterObj As CollectionFilter)","signature":"Public Function filter(filterObj As CollectionFilter) As Collection","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Filters a collection using a CollectionFilter and returns a new &amp;quot;filtered&amp;quot; collection&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Filters a collection using a CollectionFilter and returns a new &amp;quot;filtered&amp;quot; collection","inlinecomment":" \t &amp;apos; Filters a collection using a CollectionFilter and returns a new &amp;quot;filtered&amp;quot; collection","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code shows how to create a filter for even numbers and use it. The code is very basic with no error handling.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Class EvenFilterer as CollectionFilter&amp;lt;br /&amp;gt;    Function filter(source as Variant) as Boolean&amp;lt;br /&amp;gt;        If (source Mod 2 = 0) Then Return True&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class&amp;lt;br /&amp;gt;Dim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim coll2 as Collection&amp;lt;br /&amp;gt;Dim filterer as New EvenFilterer()&amp;lt;br /&amp;gt;&amp;apos; Populating collection omitted&amp;lt;br /&amp;gt;Set coll2 = coll1.filter(filterer)", "signatureelements":["Public","Function"], "arguments":[{"label":"filterObj","comment":"Collection filter to check each value with","valuetype":"CollectionFilter","filenamebase":"filterObj_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionfilter","qn":"filterObj","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Collection filter to check each value with&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Collection filter to check each value with","inlinecomment":" \t &amp;apos; Collection filter to check each value with"}]},{"label":"getAndRemoveFirstRaw","comment":"Returns the FIRST element in the collection and removes it from the collection.\nIf the collection is empty it just exits the function","valuetype":"Variant","filenamebase":"getAndRemoveFirstRaw_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"getAndRemoveFirstRaw","codesample":"%REM\nThe following code builds a FIFO queue, printing the entries from the collection\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nPrint CStr(coll.getAndRemoveFirstRaw())    &amp;apos;Prints One\nPrint CStr(coll.getAndRemoveFirstRaw())    &amp;apos;Prints Two\nPrint coll.hasContent    &amp;apos;Prints False","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveFirstRaw() As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns the FIRST element in the collection and removes it from the collection.&amp;lt;br /&amp;gt;If the collection is empty it just exits the function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns the FIRST element in the collection and removes it from the collection.&amp;lt;br /&amp;gt;If the collection is empty it just exits the function","inlinecomment":" \t &amp;apos; Returns the FIRST element in the collection and removes it from the collection.\nIf the collection is empty it just exits the function","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code builds a FIFO queue, printing the entries from the collection&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;Two&amp;quot;)&amp;lt;br /&amp;gt;Print CStr(coll.getAndRemoveFirstRaw())    &amp;apos;Prints One&amp;lt;br /&amp;gt;Print CStr(coll.getAndRemoveFirstRaw())    &amp;apos;Prints Two&amp;lt;br /&amp;gt;Print coll.hasContent    &amp;apos;Prints False", "signatureelements":["Public","Function"]},{"label":"getAndRemoveLastRaw","comment":"Returns the LAST element in the collection and removes it from the collection.\nIf the collection is empty it just exits the function","valuetype":"Variant","filenamebase":"getAndRemoveLastRaw_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"getAndRemoveLastRaw","codesample":"%REM\nThe following code builds a LIFO stack, printing the entries from the collection\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nPrint CStr(coll.getAndRemoveLastRaw())    &amp;apos;Prints Two\nPrint CStr(coll.getAndRemoveLastRaw())    &amp;apos;Prints One\nPrint coll.hasContent    &amp;apos;Prints False","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveLastRaw() As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns the LAST element in the collection and removes it from the collection.&amp;lt;br /&amp;gt;If the collection is empty it just exits the function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns the LAST element in the collection and removes it from the collection.&amp;lt;br /&amp;gt;If the collection is empty it just exits the function","inlinecomment":" \t &amp;apos; Returns the LAST element in the collection and removes it from the collection.\nIf the collection is empty it just exits the function","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code builds a LIFO stack, printing the entries from the collection&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;Two&amp;quot;)&amp;lt;br /&amp;gt;Print CStr(coll.getAndRemoveLastRaw())    &amp;apos;Prints Two&amp;lt;br /&amp;gt;Print CStr(coll.getAndRemoveLastRaw())    &amp;apos;Prints One&amp;lt;br /&amp;gt;Print coll.hasContent    &amp;apos;Prints False", "signatureelements":["Public","Function"]},{"label":"getIndex","comment":"Checks whether the Collection contains a specific value.","valuetype":"Variant","filenamebase":"getIndex_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"getIndex","codesample":"%REM\nThe following code creates a Collection of strings. This will print &amp;quot;Contains One&amp;quot; and &amp;quot;Does not contain Two&amp;quot;.\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nIf (Not IsNull(coll.getIndex(&amp;quot;One&amp;quot;)) Then Print &amp;quot;Contains One&amp;quot;\nIf (IsNull(coll.getIndex(&amp;quot;Two&amp;quot;)) Then Print &amp;quot;Does not contain Two&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(checkValue As Variant)","signature":"Public Function getIndex(checkValue As Variant) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Checks whether the Collection contains a specific value.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Checks whether the Collection contains a specific value.","inlinecomment":" \t &amp;apos; Checks whether the Collection contains a specific value.","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code creates a Collection of strings. This will print &amp;quot;Contains One&amp;quot; and &amp;quot;Does not contain Two&amp;quot;.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;If (Not IsNull(coll.getIndex(&amp;quot;One&amp;quot;)) Then Print &amp;quot;Contains One&amp;quot;&amp;lt;br /&amp;gt;If (IsNull(coll.getIndex(&amp;quot;Two&amp;quot;)) Then Print &amp;quot;Does not contain Two&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"checkValue","comment":"Value to check for","valuetype":"Variant","filenamebase":"checkValue_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectiongetIndex","qn":"checkValue","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to check for&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to check for","inlinecomment":" \t &amp;apos; Value to check for"}]},{"label":"getNthElementRaw","comment":"Gets the nth elment as a raew variant, starting at index 0","valuetype":"Variant","filenamebase":"getNthElementRaw_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"getNthElementRaw","codesample":"%REM\nThe following code gets the element at index 1. It then checks an entry at index 2, which returns that it is empty\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nPrint CStr(coll.getNthElementRaw(1))    &amp;apos; Prints &amp;quot;Two&amp;quot;\nPrint IsEmpty(coll.getNthElementRaw(5))     &amp;apos; Prints True","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(index As Long)","signature":"Public Function getNthElementRaw(index As Long) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Gets the nth elment as a raew variant, starting at index 0&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Gets the nth elment as a raew variant, starting at index 0","inlinecomment":" \t &amp;apos; Gets the nth elment as a raew variant, starting at index 0","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code gets the element at index 1. It then checks an entry at index 2, which returns that it is empty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;Two&amp;quot;)&amp;lt;br /&amp;gt;Print CStr(coll.getNthElementRaw(1))    &amp;apos; Prints &amp;quot;Two&amp;quot;&amp;lt;br /&amp;gt;Print IsEmpty(coll.getNthElementRaw(5))     &amp;apos; Prints True", "signatureelements":["Public","Function"], "arguments":[{"label":"index","comment":"Index of the element to return","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectiongetNthElementRaw","qn":"index","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Index of the element to return&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Index of the element to return","inlinecomment":" \t &amp;apos; Index of the element to return"}]},{"label":"insertAt","comment":"Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections","valuetype":"Boolean","filenamebase":"insertAt_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"insertAt","codesample":"%REM\nThe following code is abbreviated code from Collection.getIndex. It compares each element against the value being checked, and if it matches, returns the current index.\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim testSuite as New TestSuite(&amp;quot;Validate collections&amp;quot;)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nCall coll.insertAt(&amp;quot;Three&amp;quot;, 1)\nCall testSuite.describe(&amp;quot;Check 3 elements&amp;quot;).assertEqualsLong(3, coll.elementCount)\nCall testSuite.describe(&amp;quot;Check second element is Three&amp;quot;).assertEqualsString(&amp;quot;Three&amp;quot;, CStr(coll.getNthElementRaw(1), True)\nCall testSuite.describe(&amp;quot;Check third element is Two&amp;quot;).assertEqualsString(&amp;quot;Two&amp;quot;, CStr(coll.getNthElementRaw(2), True)\nDim coll1 as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)    &amp;apos; Sorted\nCall coll1.addAll(coll)\nCall testSuite.describe(&amp;quot;Test adding to sorted collection&amp;quot;)\nTry\n    Call coll.insertAt(&amp;quot;Three&amp;quot;, 1)\n    Call testSuite.addResult(False, &amp;quot;Successfully inserted into sorted collection, this should have errored&amp;quot;)\nCatch\n    Call testSuite.addResult(True, &amp;quot;&amp;quot;)\nEnd Try","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant, index As Long)","signature":"Public Function insertAt(source As Variant, index As Long) As Boolean","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections","inlinecomment":" \t &amp;apos; Inserts an element in the collection at an index, starting at index 0. Not allowed for sorted collections","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is abbreviated code from Collection.getIndex. It compares each element against the value being checked, and if it matches, returns the current index.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim testSuite as New TestSuite(&amp;quot;Validate collections&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;Two&amp;quot;)&amp;lt;br /&amp;gt;Call coll.insertAt(&amp;quot;Three&amp;quot;, 1)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Check 3 elements&amp;quot;).assertEqualsLong(3, coll.elementCount)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Check second element is Three&amp;quot;).assertEqualsString(&amp;quot;Three&amp;quot;, CStr(coll.getNthElementRaw(1), True)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Check third element is Two&amp;quot;).assertEqualsString(&amp;quot;Two&amp;quot;, CStr(coll.getNthElementRaw(2), True)&amp;lt;br /&amp;gt;Dim coll1 as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)    &amp;apos; Sorted&amp;lt;br /&amp;gt;Call coll1.addAll(coll)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test adding to sorted collection&amp;quot;)&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    Call coll.insertAt(&amp;quot;Three&amp;quot;, 1)&amp;lt;br /&amp;gt;    Call testSuite.addResult(False, &amp;quot;Successfully inserted into sorted collection, this should have errored&amp;quot;)&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    Call testSuite.addResult(True, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;End Try", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Must match Collection&amp;apos;s ContentType","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectioninsertAt","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Must match Collection&amp;apos;s ContentType&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Must match Collection&amp;apos;s ContentType","inlinecomment":" \t &amp;apos; Must match Collection&amp;apos;s ContentType"},{"label":"index","comment":"Index at which to insert the element","valuetype":"Long","filenamebase":"index_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectioninsertAt","qn":"index","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Index at which to insert the element&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Index at which to insert the element","inlinecomment":" \t &amp;apos; Index at which to insert the element"}]},{"label":"join","comment":"Joins a collection of scalar values into a single string response separated by a passed delimiter","valuetype":"String","filenamebase":"join_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"join","codesample":"Dim coll as New Collection(INTEGER, Nothing, False, False)\nCall coll.add(1)\nCall coll.add(2)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints &amp;quot;1,2&amp;quot;\nSet coll = new Collection(PERSON, Nothing, False, False)    &amp;apos; Assumes a Person class available\nDim p1 as New Person\nDim p2 as New Person\nCall coll.add(p1)\nCall coll.add(p2)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints &amp;quot;NOT STRINGABLE,NOT STRINGABLE&amp;quot;","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(delim As String)","signature":"Public Function join(delim As String) As String","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Joins a collection of scalar values into a single string response separated by a passed delimiter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Joins a collection of scalar values into a single string response separated by a passed delimiter","inlinecomment":" \t &amp;apos; Joins a collection of scalar values into a single string response separated by a passed delimiter","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(INTEGER, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(1)&amp;lt;br /&amp;gt;Call coll.add(2)&amp;lt;br /&amp;gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints &amp;quot;1,2&amp;quot;&amp;lt;br /&amp;gt;Set coll = new Collection(PERSON, Nothing, False, False)    &amp;apos; Assumes a Person class available&amp;lt;br /&amp;gt;Dim p1 as New Person&amp;lt;br /&amp;gt;Dim p2 as New Person&amp;lt;br /&amp;gt;Call coll.add(p1)&amp;lt;br /&amp;gt;Call coll.add(p2)&amp;lt;br /&amp;gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints &amp;quot;NOT STRINGABLE,NOT STRINGABLE&amp;quot;", "signatureelements":["Public","Function"], "arguments":[{"label":"delim","comment":"Delimiter to separate values","valuetype":"String","filenamebase":"delim_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionjoin","qn":"delim","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Delimiter to separate values&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Delimiter to separate values","inlinecomment":" \t &amp;apos; Delimiter to separate values"}]},{"label":"remove","comment":"Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.","valuetype":"Long","filenamebase":"remove_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"remove","codesample":"Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nCall coll.add(1)\nCall coll.add(2)\nCall coll.add(2)\nCall coll.add(6)\nCall coll.add(2)\nPrint coll.remove(2, False)   &amp;apos;Prints 1\nPrint coll.remove(2, True)    &amp;apos; Prints 2","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant, allMatches As Boolean)","signature":"Public Function remove(source As Variant, allMatches As Boolean) As Long","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.","inlinecomment":" \t &amp;apos; Removes an element (or elements, if not unique) from the Collection. Returns the number of elements removed.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(1)&amp;lt;br /&amp;gt;Call coll.add(2)&amp;lt;br /&amp;gt;Call coll.add(2)&amp;lt;br /&amp;gt;Call coll.add(6)&amp;lt;br /&amp;gt;Call coll.add(2)&amp;lt;br /&amp;gt;Print coll.remove(2, False)   &amp;apos;Prints 1&amp;lt;br /&amp;gt;Print coll.remove(2, True)    &amp;apos; Prints 2", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element to remove","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionremove","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element to remove&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element to remove","inlinecomment":" \t &amp;apos; Element to remove"},{"label":"allMatches","comment":"Whether to remove all elements that match source or just the first match","valuetype":"Boolean","filenamebase":"allMatches_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionremove","qn":"allMatches","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether to remove all elements that match source or just the first match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether to remove all elements that match source or just the first match","inlinecomment":" \t &amp;apos; Whether to remove all elements that match source or just the first match"}]},{"label":"replace","comment":"Replaces an element with another and returns the number of replacements made.\nIf the Collection is unsorted, replacements are made at the same positions.\nIf the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.","valuetype":"Long","filenamebase":"replace_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"replace","codesample":"Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nCall coll.add(1)\nCall coll.add(2)\nCall coll.add(6)\nCall coll.add(1)\nCall coll.replace(1, 3, True)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos;Prints 3,2,6,3\nDim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, True)\nCall coll1.add(1)\nCall coll1.add(2)\nCall coll1.add(6)\nCall coll1.add(1)\nCall coll1.replace(1, 3, True)\nPrint coll1.join(&amp;quot;,&amp;quot;)    &amp;apos;Prints 2,3,3,6","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(oldValue As Variant, newValue As Variant, allMatches As Boolean)","signature":"Public Function replace(oldValue As Variant, newValue As Variant, allMatches As Boolean) As Long","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Replaces an element with another and returns the number of replacements made.&amp;lt;br /&amp;gt;If the Collection is unsorted, replacements are made at the same positions.&amp;lt;br /&amp;gt;If the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Replaces an element with another and returns the number of replacements made.&amp;lt;br /&amp;gt;If the Collection is unsorted, replacements are made at the same positions.&amp;lt;br /&amp;gt;If the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.","inlinecomment":" \t &amp;apos; Replaces an element with another and returns the number of replacements made.\nIf the Collection is unsorted, replacements are made at the same positions.\nIf the Collection is sorted, the old elements are removed and new ones inserted at the appropriate sorted location.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(1)&amp;lt;br /&amp;gt;Call coll.add(2)&amp;lt;br /&amp;gt;Call coll.add(6)&amp;lt;br /&amp;gt;Call coll.add(1)&amp;lt;br /&amp;gt;Call coll.replace(1, 3, True)&amp;lt;br /&amp;gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos;Prints 3,2,6,3&amp;lt;br /&amp;gt;Dim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, True)&amp;lt;br /&amp;gt;Call coll1.add(1)&amp;lt;br /&amp;gt;Call coll1.add(2)&amp;lt;br /&amp;gt;Call coll1.add(6)&amp;lt;br /&amp;gt;Call coll1.add(1)&amp;lt;br /&amp;gt;Call coll1.replace(1, 3, True)&amp;lt;br /&amp;gt;Print coll1.join(&amp;quot;,&amp;quot;)    &amp;apos;Prints 2,3,3,6", "signatureelements":["Public","Function"], "arguments":[{"label":"oldValue","comment":"Value to replace","valuetype":"Variant","filenamebase":"oldValue_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionreplace","qn":"oldValue","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to replace&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to replace","inlinecomment":" \t &amp;apos; Value to replace"},{"label":"newValue","comment":"Value to insert","valuetype":"Variant","filenamebase":"newValue_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionreplace","qn":"newValue","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to insert&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to insert","inlinecomment":" \t &amp;apos; Value to insert"},{"label":"allMatches","comment":"Whether to replace the first match or all matches","valuetype":"Boolean","filenamebase":"allMatches_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionreplace","qn":"allMatches","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether to replace the first match or all matches&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether to replace the first match or all matches","inlinecomment":" \t &amp;apos; Whether to replace the first match or all matches"}]},{"label":"toJson","comment":"Converts the Collection to a JsonObject that&amp;apos;s an array.\nIf the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.","valuetype":"JsonObject","filenamebase":"toJson_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"toJson","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim jsonObj as JsonObject\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.add(&amp;quot;Two&amp;quot;)\nSet jsonObj = coll.toJson()\nPrint jsonObj.toString(False)    &amp;apos;Prints [&amp;quot;One&amp;quot;,&amp;quot;Two&amp;quot;]","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function toJson() As JsonObject","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Converts the Collection to a JsonObject that&amp;apos;s an array.&amp;lt;br /&amp;gt;If the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Converts the Collection to a JsonObject that&amp;apos;s an array.&amp;lt;br /&amp;gt;If the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.","inlinecomment":" \t &amp;apos; Converts the Collection to a JsonObject that&amp;apos;s an array.\nIf the array values are objects, the code will try to call a toJson method on the object, otherwise skip them.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;Two&amp;quot;)&amp;lt;br /&amp;gt;Set jsonObj = coll.toJson()&amp;lt;br /&amp;gt;Print jsonObj.toString(False)    &amp;apos;Prints [&amp;quot;One&amp;quot;,&amp;quot;Two&amp;quot;]", "signatureelements":["Public","Function"]},{"label":"comparator","comment":"Comparator to compare values with","valuetype":"Comparator","filenamebase":"comparator_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.comparator","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get comparator As Comparator","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Comparator to compare values with&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Comparator to compare values with","inlinecomment":" \t &amp;apos; Comparator to compare values with","parentclassname":"Collection","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"contentType","comment":"TypeName(s) of elements within the Collection","valuetype":"String","filenamebase":"contentType_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.contentType","codesample":"Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;,Nothing,False,False)\nPrint coll.contentType    &amp;apos;Prints &amp;quot;SCALAR&amp;quot;","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get contentType As String","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;TypeName(s) of elements within the Collection&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"TypeName(s) of elements within the Collection","inlinecomment":" \t &amp;apos; TypeName(s) of elements within the Collection","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;,Nothing,False,False)&amp;lt;br /&amp;gt;Print coll.contentType    &amp;apos;Prints &amp;quot;SCALAR&amp;quot;", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"elementCount","comment":"Number of elements within the Collection","valuetype":"Long","filenamebase":"elementCount_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.elementCount","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nPrint coll.elementCount    &amp;apos;Prints 0","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get elementCount As Long","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Number of elements within the Collection&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Number of elements within the Collection","inlinecomment":" \t &amp;apos; Number of elements within the Collection","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Print coll.elementCount    &amp;apos;Prints 0", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"hasContent","comment":"Flag indicating if the Collection has elemens","valuetype":"Boolean","filenamebase":"hasContent_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.hasContent","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothig, False, False)\nPrint coll.hasContent   &amp;apos;Prints False\nCall coll.add(&amp;quot;Hello&amp;quot;)\nPrint coll.hasContent    &amp;apos;Prints True","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get hasContent As Boolean","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Flag indicating if the Collection has elemens&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Flag indicating if the Collection has elemens","inlinecomment":" \t &amp;apos; Flag indicating if the Collection has elemens","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothig, False, False)&amp;lt;br /&amp;gt;Print coll.hasContent   &amp;apos;Prints False&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;Hello&amp;quot;)&amp;lt;br /&amp;gt;Print coll.hasContent    &amp;apos;Prints True", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isLocked","comment":"Flag indicating if the Collection is locked, so adds, removes and replaces are aborted","valuetype":"Boolean","filenamebase":"isLocked_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.isLocked","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.lock()\nPrint coll.isLocked    &amp;apos;Prints True","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isLocked As Boolean","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Flag indicating if the Collection is locked, so adds, removes and replaces are aborted&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Flag indicating if the Collection is locked, so adds, removes and replaces are aborted","inlinecomment":" \t &amp;apos; Flag indicating if the Collection is locked, so adds, removes and replaces are aborted","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.lock()&amp;lt;br /&amp;gt;Print coll.isLocked    &amp;apos;Prints True", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isReversed","comment":"Flagindicating whether the Collection has been reversed","valuetype":"Boolean","filenamebase":"isReversed_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.isReversed","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nPrint coll.isReversed   &amp;apos; Prints False\nCall coll.reverse()\nPrint coll.isReversed   &amp;apos; Prints True\nCall coll.reverse()\nPrint coll.isReversed   &amp;apos; Prints False","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isReversed As Boolean","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Flagindicating whether the Collection has been reversed&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Flagindicating whether the Collection has been reversed","inlinecomment":" \t &amp;apos; Flagindicating whether the Collection has been reversed","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Print coll.isReversed   &amp;apos; Prints False&amp;lt;br /&amp;gt;Call coll.reverse()&amp;lt;br /&amp;gt;Print coll.isReversed   &amp;apos; Prints True&amp;lt;br /&amp;gt;Call coll.reverse()&amp;lt;br /&amp;gt;Print coll.isReversed   &amp;apos; Prints False", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isSorted","comment":"Flag indicating if the Collection is sorted (using Comparator object internally)","valuetype":"Boolean","filenamebase":"isSorted_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.isSorted","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nPrint coll.isSorted    &amp;apos;Prints false","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isSorted As Boolean","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Flag indicating if the Collection is sorted (using Comparator object internally)&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Flag indicating if the Collection is sorted (using Comparator object internally)","inlinecomment":" \t &amp;apos; Flag indicating if the Collection is sorted (using Comparator object internally)","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Print coll.isSorted    &amp;apos;Prints false", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"isUnique","comment":"Flag indicating if the elements in the Collection must be unique","valuetype":"Boolean","filenamebase":"isUnique_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.isUnique","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nPrint coll.isUnique    &amp;apos; Prints False","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get isUnique As Boolean","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Flag indicating if the elements in the Collection must be unique&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Flag indicating if the elements in the Collection must be unique","inlinecomment":" \t &amp;apos; Flag indicating if the elements in the Collection must be unique","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Print coll.isUnique    &amp;apos; Prints False", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked\nor attempting to insert an entry into a sorted Collection.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Get.suppressErrors","codesample":"%REM\nThe following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim success as Boolean\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will not get to this line\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed\nEnd Try\ncoll.suppressErrors = True\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will print False\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will NOT be printed\nEnd Try","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get suppressErrors As Boolean","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked&amp;lt;br /&amp;gt;or attempting to insert an entry into a sorted Collection.&amp;lt;br /&amp;gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked&amp;lt;br /&amp;gt;or attempting to insert an entry into a sorted Collection.&amp;lt;br /&amp;gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false","inlinecomment":" \t &amp;apos; Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked\nor attempting to insert an entry into a sorted Collection.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim success as Boolean&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    success = coll.add(2)&amp;lt;br /&amp;gt;    Print success    &amp;apos; Code will not get to this line&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed&amp;lt;br /&amp;gt;End Try&amp;lt;br /&amp;gt;coll.suppressErrors = True&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    success = coll.add(2)&amp;lt;br /&amp;gt;    Print success    &amp;apos; Code will print False&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will NOT be printed&amp;lt;br /&amp;gt;End Try", "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked\nor attempting to insert an entry into a sorted Collection.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"Set.suppressErrors","codesample":"%REM\nThe following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False\n%END REM\nDim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nDim success as Boolean\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will not get to this line\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed\nEnd Try\ncoll.suppressErrors = True\nTry\n    success = coll.add(2)\n    Print success    &amp;apos; Code will print False\nCatch\n    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will NOT be printed\nEnd Try","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set suppressErrors As Boolean","modifiers":"Public Set","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked&amp;lt;br /&amp;gt;or attempting to insert an entry into a sorted Collection.&amp;lt;br /&amp;gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked&amp;lt;br /&amp;gt;or attempting to insert an entry into a sorted Collection.&amp;lt;br /&amp;gt;Instead of throwing an error, e.g. for wrong content type, the method will just return false","inlinecomment":" \t &amp;apos; Suppress errors on adding elements. Errors wll still be thrown if the Collection is locked\nor attempting to insert an entry into a sorted Collection.\nInstead of throwing an error, e.g. for wrong content type, the method will just return false","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code will print &amp;quot;Error adding&amp;quot; for the first Try/Catch. But for the second, the error will be suppressed and the call to .add() will return False&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim success as Boolean&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    success = coll.add(2)&amp;lt;br /&amp;gt;    Print success    &amp;apos; Code will not get to this line&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will be printed&amp;lt;br /&amp;gt;End Try&amp;lt;br /&amp;gt;coll.suppressErrors = True&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    success = coll.add(2)&amp;lt;br /&amp;gt;    Print success    &amp;apos; Code will print False&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    Print &amp;quot;Error adding&amp;quot;   &amp;apos; This will NOT be printed&amp;lt;br /&amp;gt;End Try", "signatureelements":["Public","Property","Set"]},{"label":"clear","comment":"Removes all values from the Collection and resets whether the collection is reversed.","valuetype":"","filenamebase":"clear_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"clear","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nPrint coll.elementCount    &amp;apos; Prints 1\nCall coll.clear()\nPrint coll.elementCount    &amp;apos; Prints 0","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub clear()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Removes all values from the Collection and resets whether the collection is reversed.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Removes all values from the Collection and resets whether the collection is reversed.","inlinecomment":" \t &amp;apos; Removes all values from the Collection and resets whether the collection is reversed.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Print coll.elementCount    &amp;apos; Prints 1&amp;lt;br /&amp;gt;Call coll.clear()&amp;lt;br /&amp;gt;Print coll.elementCount    &amp;apos; Prints 0", "signatureelements":["Public","Sub"]},{"label":"fromJson","comment":"Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.","valuetype":"","filenamebase":"fromJson_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"fromJson","codesample":"Dim jsonObj as New JsonObject\nCall jsonObj.appendToJsonArray(1)\nCall jsonObj.appendToJsonArray(2)\nCall jsonObj.appendToJsonArray(3)\nDim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, True, True)\nCall coll.fromJson(jsonObj)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(jsonObj As JsonObject)","signature":"Public Sub fromJson(jsonObj As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.","inlinecomment":" \t &amp;apos; Loads the scalar values array from the JsonObject into the Collection. Can only be used for a JsonObject that contains a single array of scalars.","parentclassname":"Collection","codesamplehtml":"Dim jsonObj as New JsonObject&amp;lt;br /&amp;gt;Call jsonObj.appendToJsonArray(1)&amp;lt;br /&amp;gt;Call jsonObj.appendToJsonArray(2)&amp;lt;br /&amp;gt;Call jsonObj.appendToJsonArray(3)&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, True, True)&amp;lt;br /&amp;gt;Call coll.fromJson(jsonObj)", "signatureelements":["Public","Sub"], "arguments":[{"label":"jsonObj","comment":"JsonObject containig an array of scalars","valuetype":"JsonObject","filenamebase":"jsonObj_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionfromJson","qn":"jsonObj","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject containig an array of scalars&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject containig an array of scalars","inlinecomment":" \t &amp;apos; JsonObject containig an array of scalars"}]},{"label":"lock","comment":"Locks the collection, so any add, remove, replace or reverse functions trigger errors. \n\t\tUseful when passing a collection to other functions.","valuetype":"","filenamebase":"lock_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"lock","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;One&amp;quot;)\nCall coll.lock()\nCall coll.add(&amp;quot;Two&amp;quot;)   &amp;apos; Throws error","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub lock()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Locks the collection, so any add, remove, replace or reverse functions trigger errors. &amp;lt;br /&amp;gt;\t\tUseful when passing a collection to other functions.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Locks the collection, so any add, remove, replace or reverse functions trigger errors. &amp;lt;br /&amp;gt;\t\tUseful when passing a collection to other functions.","inlinecomment":" \t &amp;apos; Locks the collection, so any add, remove, replace or reverse functions trigger errors. \n\t\tUseful when passing a collection to other functions.","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Call coll.lock()&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;Two&amp;quot;)   &amp;apos; Throws error", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(contentType As String, comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","signature":"Public Sub New(contentType As String, comparator As Comparator, mustBeUnique As Boolean, isSorted As Boolean)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"Collection","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"contentType","comment":"Defines the Content Type of the Collection","valuetype":"String","filenamebase":"contentType_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionNew","qn":"contentType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Defines the Content Type of the Collection&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Defines the Content Type of the Collection","inlinecomment":" \t &amp;apos; Defines the Content Type of the Collection"},{"label":"comparator","comment":"Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value","valuetype":"Comparator","filenamebase":"comparator_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionNew","qn":"comparator","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value","inlinecomment":" \t &amp;apos; Comparator instance to use when checking for unique and sorting elements. If Nothing is passed, a default Comparator will be used which works for scalars, grouping numbers and comparing on data type and value"},{"label":"mustBeUnique","comment":"Flag indicating if elements within the Collection must be unique","valuetype":"Boolean","filenamebase":"mustBeUnique_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionNew","qn":"mustBeUnique","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Flag indicating if elements within the Collection must be unique&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Flag indicating if elements within the Collection must be unique","inlinecomment":" \t &amp;apos; Flag indicating if elements within the Collection must be unique"},{"label":"isSorted","comment":"Flag indicating if the content within the Collection shall be sorted","valuetype":"Boolean","filenamebase":"isSorted_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectionNew","qn":"isSorted","argumentindex":4,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Flag indicating if the content within the Collection shall be sorted&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Flag indicating if the content within the Collection shall be sorted","inlinecomment":" \t &amp;apos; Flag indicating if the content within the Collection shall be sorted"}]},{"label":"reverse","comment":"Reverses a collection","valuetype":"","filenamebase":"reverse_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"reverse","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.add(&amp;quot;A&amp;quot;)\nCall coll.add(&amp;quot;B&amp;quot;)\nCall coll.reverse()\nCall coll.add(&amp;quot;C&amp;quot;)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints B,A,C\nSet coll = new Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)\nCall coll.add(&amp;quot;A&amp;quot;)\nCall coll.add(&amp;quot;B&amp;quot;)\nCall coll.reverse()\nCall coll.add(&amp;quot;C&amp;quot;)\nPrint coll.join(&amp;quot;,&amp;quot;)   Prints C,B,A","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reverse()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Reverses a collection&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Reverses a collection","inlinecomment":" \t &amp;apos; Reverses a collection","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;A&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;B&amp;quot;)&amp;lt;br /&amp;gt;Call coll.reverse()&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;C&amp;quot;)&amp;lt;br /&amp;gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints B,A,C&amp;lt;br /&amp;gt;Set coll = new Collection(&amp;quot;STRING&amp;quot;, Nothing, False, True)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;A&amp;quot;)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;B&amp;quot;)&amp;lt;br /&amp;gt;Call coll.reverse()&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;C&amp;quot;)&amp;lt;br /&amp;gt;Print coll.join(&amp;quot;,&amp;quot;)   Prints C,B,A", "signatureelements":["Public","Sub"]},{"label":"transform","comment":"Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed","valuetype":"","filenamebase":"transform_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"transform","codesample":"%REM\nThe following code shows how to create a transformer to square values. The code is very basic with no error handling.\n%END REM\nClass SquareTransformer as CollectionTransformer\n    Function transform(source as Variant) as Variant\n        transform = source * source\n    End Function\nEnd Class\nDim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nDim coll2 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)\nDim transformer as New SquareTransformer()\nCall coll1.add(2)\nCall coll1.add(3)\nCall coll1.add(4)\nCall coll1.transform(transformer, coll2)\nPrint coll2.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints 4,9,16","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(transformer As CollectionTransformer, newColl As Collection)","signature":"Public Sub transform(transformer As CollectionTransformer, newColl As Collection)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed","inlinecomment":" \t &amp;apos; Transforms members of this Collection using a CollectionTransformer and adds them to the new Collection passed","parentclassname":"Collection","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code shows how to create a transformer to square values. The code is very basic with no error handling.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Class SquareTransformer as CollectionTransformer&amp;lt;br /&amp;gt;    Function transform(source as Variant) as Variant&amp;lt;br /&amp;gt;        transform = source * source&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class&amp;lt;br /&amp;gt;Dim coll1 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim coll2 as New Collection(&amp;quot;INTEGER&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Dim transformer as New SquareTransformer()&amp;lt;br /&amp;gt;Call coll1.add(2)&amp;lt;br /&amp;gt;Call coll1.add(3)&amp;lt;br /&amp;gt;Call coll1.add(4)&amp;lt;br /&amp;gt;Call coll1.transform(transformer, coll2)&amp;lt;br /&amp;gt;Print coll2.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints 4,9,16", "signatureelements":["Public","Sub"], "arguments":[{"label":"transformer","comment":"CollectionTransformer to transform members","valuetype":"CollectionTransformer","filenamebase":"transformer_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectiontransform","qn":"transformer","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;CollectionTransformer to transform members&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"CollectionTransformer to transform members","inlinecomment":" \t &amp;apos; CollectionTransformer to transform members"},{"label":"newColl","comment":"Collection to load transformed members into","valuetype":"Collection","filenamebase":"newColl_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsCollectiontransform","qn":"newColl","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Collection to load transformed members into&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Collection to load transformed members into","inlinecomment":" \t &amp;apos; Collection to load transformed members into"}]},{"label":"unlock","comment":"Unlocks the Collection, so add, remove, replace or reverse functions can be used again","valuetype":"","filenamebase":"unlock_Method","fqnprefix":"Collections.VoltScriptCollections.Collection","qn":"unlock","codesample":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)\nCall coll.lock()\nTry\n    Call coll.add(&amp;quot;One&amp;quot;)\nCatch\n    &amp;apos; Code will enter this catch block\nEnd Try\nCall coll.unlock()\nCall coll.add(&amp;quot;One&amp;quot;)   &amp;apos; This will be successful","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub unlock()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Unlocks the Collection, so add, remove, replace or reverse functions can be used again&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Unlocks the Collection, so add, remove, replace or reverse functions can be used again","inlinecomment":" \t &amp;apos; Unlocks the Collection, so add, remove, replace or reverse functions can be used again","parentclassname":"Collection","codesamplehtml":"Dim coll as New Collection(&amp;quot;STRING&amp;quot;, Nothing, False, False)&amp;lt;br /&amp;gt;Call coll.lock()&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    Call coll.add(&amp;quot;One&amp;quot;)&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    &amp;apos; Code will enter this catch block&amp;lt;br /&amp;gt;End Try&amp;lt;br /&amp;gt;Call coll.unlock()&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;One&amp;quot;)   &amp;apos; This will be successful", "signatureelements":["Public","Sub"]}]}
