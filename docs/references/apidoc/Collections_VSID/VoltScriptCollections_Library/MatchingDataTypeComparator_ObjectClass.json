{"classname":"MatchingDataTypeComparator","comment":"Class for comparing, ignoring data type check","valuetype":"Comparator","filenamebase":"MatchingDataTypeComparator_ObjectClass","fqnprefix":"Collections.VoltScriptCollections","qn":"MatchingDataTypeComparator","codesample":"Dim compar as New MatchingDataTypeComparator(False)\nDim coll as New Collection(&amp;quot;SCALAR&amp;quot;, compar, False, True)\nCall coll.add(2)\nCall coll.add(&amp;quot;1&amp;quot;)\nPrint coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints 1,2","signaturecode":3072,"instancecode":1024,"parentclassname":"Comparator","classtype":"Derived","classderivetype":"Comparator","projectid":"FD17E29641C6117580258994003AF3B0","version":3,"classid":"14BB30E4C3A6C87E802589960047D345","signature":"Public Class MatchingDataTypeComparator As Comparator","modifiers":"Public","classname":"MatchingDataTypeComparator","constructorsignature":"Public Sub New(isDescending As Boolean)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class for comparing, ignoring data type check&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class for comparing, ignoring data type check","inlinecomment":" \t &amp;apos; Class for comparing, ignoring data type check","codesamplehtml":"Dim compar as New MatchingDataTypeComparator(False)&amp;lt;br /&amp;gt;Dim coll as New Collection(&amp;quot;SCALAR&amp;quot;, compar, False, True)&amp;lt;br /&amp;gt;Call coll.add(2)&amp;lt;br /&amp;gt;Call coll.add(&amp;quot;1&amp;quot;)&amp;lt;br /&amp;gt;Print coll.join(&amp;quot;,&amp;quot;)    &amp;apos; Prints 1,2", "methods":[{"label":"compare","comment":"Overrides compare method in base class. Compare function, assuming both source and target are the same data type.","valuetype":"Integer","filenamebase":"compare_Method","fqnprefix":"Collections.VoltScriptCollections.MatchingDataTypeComparator","qn":"compare","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant, target As Variant)","signature":"Public Function compare(source As Variant, target As Variant) As Integer","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overrides compare method in base class. Compare function, assuming both source and target are the same data type.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overrides compare method in base class. Compare function, assuming both source and target are the same data type.","inlinecomment":" \t &amp;apos; Overrides compare method in base class. Compare function, assuming both source and target are the same data type.","parentclassname":"MatchingDataTypeComparator","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsMatchingDataTypeComparatorcompare","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element being inserted&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element being inserted","inlinecomment":" \t &amp;apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsMatchingDataTypeComparatorcompare","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element at current position&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element at current position","inlinecomment":" \t &amp;apos; Element at current position"}]},{"label":"equals","comment":"Fnction to determine if twi values are determined to be identical.\nUsed by remove, replace, and contains functions","valuetype":"Boolean","filenamebase":"equals_Method","fqnprefix":"Collections.VoltScriptCollections.MatchingDataTypeComparator","qn":"equals","codesample":"%REM\nThe following code is Collection.getIndex().\n%END REM\nForAll elem in p_content\n    If (Me.comparator.equals(checkValue, elem)) Then Return ListTag(elem)\nEnd ForAll","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As Variant)","signature":"Public Function equals(source As Variant, target As Variant) As Boolean","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Fnction to determine if twi values are determined to be identical.&amp;lt;br /&amp;gt;Used by remove, replace, and contains functions&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Fnction to determine if twi values are determined to be identical.&amp;lt;br /&amp;gt;Used by remove, replace, and contains functions","inlinecomment":" \t &amp;apos; Fnction to determine if twi values are determined to be identical.\nUsed by remove, replace, and contains functions","parentclassname":"MatchingDataTypeComparator","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is Collection.getIndex().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;ForAll elem in p_content&amp;lt;br /&amp;gt;    If (Me.comparator.equals(checkValue, elem)) Then Return ListTag(elem)&amp;lt;br /&amp;gt;End ForAll", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Element being inserted","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsMatchingDataTypeComparatorequals","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element being inserted&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element being inserted","inlinecomment":" \t &amp;apos; Element being inserted"},{"label":"target","comment":"Element at current position","valuetype":"Variant","filenamebase":"target_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsMatchingDataTypeComparatorequals","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Element at current position&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Element at current position","inlinecomment":" \t &amp;apos; Element at current position"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"Collections.VoltScriptCollections.MatchingDataTypeComparator","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(isDescending As Boolean)","signature":"Public Sub New(isDescending As Boolean)","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"MatchingDataTypeComparator","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"isDescending","comment":"Whether sorting should be in descending order","valuetype":"Boolean","filenamebase":"isDescending_ValuedElement","fqnprefix":"CollectionsVoltScriptCollectionsMatchingDataTypeComparatorNew","qn":"isDescending","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether sorting should be in descending order&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether sorting should be in descending order","inlinecomment":" \t &amp;apos; Whether sorting should be in descending order"}]}]}
